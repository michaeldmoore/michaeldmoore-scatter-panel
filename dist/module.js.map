{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./ScatterPanel.css","webpack:///../node_modules/css-loader/dist/runtime/api.js","webpack:///../node_modules/is-any-array/src/index.js","webpack:///../node_modules/median-quickselect/lib/median-quickselect.min.js","webpack:///../node_modules/ml-array-max/lib-es6/index.js","webpack:///../node_modules/ml-array-median/lib-es6/index.js","webpack:///../node_modules/ml-array-min/lib-es6/index.js","webpack:///../node_modules/ml-array-rescale/lib-es6/index.js","webpack:///../node_modules/ml-matrix/src/correlation.js","webpack:///../node_modules/ml-matrix/src/covariance.js","webpack:///../node_modules/ml-matrix/src/dc/cholesky.js","webpack:///../node_modules/ml-matrix/src/dc/evd.js","webpack:///../node_modules/ml-matrix/src/dc/lu.js","webpack:///../node_modules/ml-matrix/src/dc/nipals.js","webpack:///../node_modules/ml-matrix/src/dc/qr.js","webpack:///../node_modules/ml-matrix/src/dc/svd.js","webpack:///../node_modules/ml-matrix/src/dc/util.js","webpack:///../node_modules/ml-matrix/src/decompositions.js","webpack:///../node_modules/ml-matrix/src/determinant.js","webpack:///../node_modules/ml-matrix/src/index.js","webpack:///../node_modules/ml-matrix/src/inspect.js","webpack:///../node_modules/ml-matrix/src/linearDependencies.js","webpack:///../node_modules/ml-matrix/src/mathOperations.js","webpack:///../node_modules/ml-matrix/src/matrix.js","webpack:///../node_modules/ml-matrix/src/pseudoInverse.js","webpack:///../node_modules/ml-matrix/src/stat.js","webpack:///../node_modules/ml-matrix/src/util.js","webpack:///../node_modules/ml-matrix/src/views/base.js","webpack:///../node_modules/ml-matrix/src/views/column.js","webpack:///../node_modules/ml-matrix/src/views/columnSelection.js","webpack:///../node_modules/ml-matrix/src/views/flipColumn.js","webpack:///../node_modules/ml-matrix/src/views/flipRow.js","webpack:///../node_modules/ml-matrix/src/views/index.js","webpack:///../node_modules/ml-matrix/src/views/row.js","webpack:///../node_modules/ml-matrix/src/views/rowSelection.js","webpack:///../node_modules/ml-matrix/src/views/selection.js","webpack:///../node_modules/ml-matrix/src/views/sub.js","webpack:///../node_modules/ml-matrix/src/views/transpose.js","webpack:///../node_modules/ml-matrix/src/wrap/WrapperMatrix1D.js","webpack:///../node_modules/ml-matrix/src/wrap/WrapperMatrix2D.js","webpack:///../node_modules/ml-matrix/src/wrap/wrap.js","webpack:///../node_modules/ml-regression-base/src/checkArrayLength.js","webpack:///../node_modules/ml-regression-base/src/index.js","webpack:///../node_modules/ml-regression-base/src/maybeToPrecision.js","webpack:///../node_modules/ml-regression-exponential/src/index.js","webpack:///../node_modules/ml-regression-polynomial/src/index.js","webpack:///../node_modules/ml-regression-power/src/index.js","webpack:///../node_modules/ml-regression-simple-linear/src/index.js","webpack:///../node_modules/ml-regression-theil-sen/src/index.js","webpack:///../node_modules/randomcolor/randomColor.js","webpack:///../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js","webpack:///../node_modules/webpack/buildin/module.js","webpack:///./ScatterPanel.css?db01","webpack:///./ScatterPanel.tsx","webpack:///./editors/BorderEditor.tsx","webpack:///./editors/ExtentsEditor.tsx","webpack:///./editors/FieldSetEditor.tsx","webpack:///./editors/GridEditor.tsx","webpack:///./editors/LabelEditor.tsx","webpack:///./editors/LegendEditor.tsx","webpack:///./editors/MarginPairEditor.tsx","webpack:///./editors/TitleEditor.tsx","webpack:///./editors/XAxisEditor.tsx","webpack:///./module.tsx","webpack:///./types/Border.ts","webpack:///./types/ColData.ts","webpack:///./types/Extents.ts","webpack:///./types/FieldSet.ts","webpack:///./types/Grid.ts","webpack:///./types/Label.ts","webpack:///./types/Legend.ts","webpack:///./types/MarginPair.ts","webpack:///./types/Title.ts","webpack:///./types/XAxis.ts","webpack:///external \"@grafana/data\"","webpack:///external \"@grafana/ui\"","webpack:///external \"d3\"","webpack:///external \"jquery\"","webpack:///external \"react\""],"names":[],"mappings":"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mB,4DAAG;;AAEtB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,iBAAiB,kBAAkB;AACnC;AACA;;AAEA;AACA;;AAE8B;;;;;;;;;;;;;AClD9B;AAAA;AAAA;AAA8B;;AAEvB,6DAA6D;AACpE,gBAAgB,+CAAM;AACtB;AACA;AACA;AACA,KAAK,+CAAM;AACX;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,kBAAkB,+CAAM;AACxB;AACA;AACA;AACA;;AAEA,SAAS,8BAA8B;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mDAAmD,iBAAiB;AACpE;AACA;AACA,2CAA2C,iBAAiB;;AAE5D;AACA,iBAAiB,eAAe;AAChC,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClDA;AAAA;AAAA;AAA8B;;AAEvB,4DAA4D;AACnE,gBAAgB,+CAAM;AACtB;AACA;AACA;AACA,KAAK,+CAAM;AACX;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,kBAAkB,+CAAM;AACxB;AACA;AACA;AACA;AACA,SAAS,gBAAgB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,cAAc;AAC/B,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjCA;AAAA;AAAA;AAAA;AAA+B;AACuB;;AAEvC;AACf;AACA,YAAY,6DAAe;AAC3B;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,+CAAM;AACtB;AACA;;AAEA,eAAe,eAAe;AAC9B;AACA,iBAAiB,OAAO;AACxB;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,qBAAqB,eAAe;AACpC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,YAAY,6DAAe;;AAE3B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,eAAe,eAAe;AAC9B,iBAAiB,WAAW;AAC5B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,QAAQ;AACnC,iBAAiB,WAAW;AAC5B,uBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;ACtFA;AAAA;AAAA;AAAA;AAAA;AAA+B;AACuB;;AAElB;;AAErB;AACf,kCAAkC;AAClC,WAAW,0BAA0B;;AAErC,aAAa,6DAAe;AAC5B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAgB,+CAAM;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,iBAAiB,OAAO;AACxB,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,kBAAkB,+CAAM;AACxB;AACA,iBAAiB,OAAO;AACxB,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,+CAAM;AACtB;AACA,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,aAAa,OAAO;AACpB;AACA;;AAEA,iBAAiB,OAAO;AACxB;AACA;AACA,eAAe,OAAO;AACtB;AACA;;AAEA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA,KAAK;AACL,iBAAiB,OAAO;AACxB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;;AAEA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;;AAEA;AACA,iBAAiB,OAAO;AACxB;AACA;;AAEA,iBAAiB,OAAO;AACxB;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;;AAEA,iBAAiB,QAAQ;AACzB;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;;AAEA,eAAe,QAAQ;AACvB;AACA;AACA;;AAEA,aAAa,OAAO;AACpB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,aAAa,OAAO;AACpB;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,wDAAU;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA,cAAc,wDAAU;AACxB;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA,aAAa,WAAW;AACxB;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,eAAe;AAClC;AACA,eAAe,WAAW;AAC1B;AACA;;AAEA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,iBAAiB,OAAO;AACxB;AACA,sBAAsB,QAAQ;AAC9B;AACA;;AAEA;AACA,mBAAmB,WAAW;AAC9B;AACA;AACA;;AAEA,iBAAiB,WAAW;AAC5B;AACA,sBAAsB,QAAQ;AAC9B;AACA;;AAEA;AACA,mBAAmB,WAAW;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,aAAa,OAAO;AACpB,eAAe,OAAO;AACtB;AACA;AACA;;AAEA,oBAAoB,cAAc;AAClC;AACA,qBAAqB,WAAW;AAChC;AACA;;AAEA,iBAAiB,WAAW;AAC5B;AACA,mBAAmB,WAAW;AAC9B;AACA;;AAEA;AACA,mBAAmB,WAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA,gCAAgC,QAAQ;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;;AAEA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;;AAEA,qBAAqB,WAAW;AAChC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,yBAAyB;AAC9C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,uBAAuB,WAAW;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAkB,QAAQ;AAC1B;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa,QAAQ;AACrB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA,kBAAkB,UAAU;AAC5B,iBAAiB,WAAW;AAC5B;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChyBA;AAAA;AAAA;AAAA;AAA+B;AACuB;;AAEvC;AACf;AACA,aAAa,6DAAe;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,UAAU;AACzB;AACA;;AAEA;;AAEA,eAAe,aAAa;AAC5B,iBAAiB,UAAU;AAC3B;AACA;;AAEA,iBAAiB,UAAU;AAC3B;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,UAAU;AAC/B;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,aAAa;AAChC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,uBAAuB,UAAU;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY,+CAAM;;AAElB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,eAAe,aAAa;AAC5B,qBAAqB,aAAa;AAClC,mBAAmB,WAAW;AAC9B;AACA;AACA;AACA;AACA,yBAAyB,QAAQ;AACjC,iBAAiB,WAAW;AAC5B;AACA;AACA,iBAAiB,OAAO;AACxB,mBAAmB,WAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,+CAAM;AACtB,mBAAmB,UAAU;AAC7B,qBAAqB,aAAa;AAClC;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,+CAAM;AACtB,mBAAmB,UAAU;AAC7B,qBAAqB,aAAa;AAClC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;AC1KA;AAAA;AAAA;AAAA;AAA+B;AACuB;;AAEvC;AACf,6BAA6B;AAC7B,QAAQ,6DAAe;AACvB,SAAS,IAAI;AACb;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,YAAY,+CAAM;AAClB,OAAO;AACP,YAAY,6DAAe;AAC3B;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrFA;AAAA;AAAA;AAAA;AAAA;AAA+B;AACuB;;AAElB;;AAErB;AACf;AACA,YAAY,6DAAe;;AAE3B;AACA;AACA;AACA;AACA;;AAEA,eAAe,OAAO;AACtB;AACA,iBAAiB,OAAO;AACxB,cAAc,wDAAU;AACxB;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,YAAY,+CAAM;;AAElB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,eAAe,OAAO;AACtB,iBAAiB,WAAW;AAC5B;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,iBAAiB,WAAW;AAC5B;AACA;AACA,iBAAiB,OAAO;AACxB,mBAAmB,WAAW;AAC9B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,aAAa;AAChC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,+CAAM;AACtB;AACA,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,+CAAM;AACtB;;AAEA,yBAAyB,QAAQ;AACjC,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA,iBAAiB,aAAa;AAC9B;AACA;AACA,qBAAqB,UAAU;AAC/B;AACA;;AAEA;;AAEA,qBAAqB,UAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpJA;AAAA;AAAA;AAAA;AAAA;AAA+B;AACuB;;AAElB;;AAErB;AACf,iCAAiC;AACjC,YAAY,6DAAe;;AAE3B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,+CAAM;AACtB,gBAAgB,+CAAM;;AAEtB;AACA;;AAEA;AACA,mBAAmB,QAAQ;;AAE3B;AACA;AACA;;AAEA,mBAAmB,SAAS;AAC5B;AACA;AACA,uBAAuB,OAAO;AAC9B,iBAAiB,wDAAU;AAC3B;AACA;AACA;AACA;AACA;AACA,yBAAyB,OAAO;AAChC;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,OAAO;AAChC;AACA;AACA,yBAAyB,OAAO;AAChC;AACA;AACA;AACA,yBAAyB,OAAO;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,OAAO;AAClC,iBAAiB,wDAAU;AAC3B;AACA;AACA;AACA;AACA;AACA,6BAA6B,OAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,OAAO;AACpC;AACA;AACA,6BAA6B,OAAO;AACpC,+BAA+B,OAAO;AACtC;AACA;AACA;AACA,6BAA6B,OAAO;AACpC;AACA,+BAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA;AACA,6BAA6B,OAAO;AACpC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,QAAQ;AAC/B,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA,6BAA6B,QAAQ;AACrC;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA,yBAAyB,OAAO;AAChC;AACA;AACA;AACA,yBAAyB,WAAW;AACpC;AACA;AACA,SAAS;AACT,yBAAyB,OAAO;AAChC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB,QAAQ;AACjC;AACA,6BAA6B,OAAO;AACpC;AACA,+BAA+B,OAAO;AACtC;AACA;AACA;AACA,+BAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,6BAA6B,QAAQ;AACrC,oBAAoB,wDAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,OAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,OAAO;AAChC,oBAAoB,wDAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,OAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,WAAW;AACpC,oBAAoB,wDAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,OAAO;AACpC;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAU;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,OAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,SAAS;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,OAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,OAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,+CAAM;;AAEnB,mBAAmB,WAAW;AAC9B;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc,+CAAM;;AAEpB,mBAAmB,WAAW;AAC9B,qBAAqB,WAAW;AAChC;AACA,uBAAuB,WAAW;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,sBAAsB,+CAAM;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+CAAM;;AAEtB,mBAAmB,WAAW;AAC9B,qBAAqB,WAAW;AAChC;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,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AM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpDA;AAAA;AAAO;AACP;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtzBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuC;;AAE6B;AACX;AAoBzC;AASA;;AAET;AACP;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,eAAe;AACpC,0BAA0B,qBAAqB;AAC/C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,yCAAyC;AACzC;AACA;AACA;AACA,WAAW,uBAAuB;AAClC;AACA,mBAAmB,UAAU;AAC7B,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;AACA;;AAEA,4CAA4C;AAC5C;AACA;AACA;AACA,WAAW,4CAA4C;AACvD;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,eAAe;AACpC,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,yBAAyB,eAAe;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA,6BAA6B,oBAAoB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA,yBAAyB,OAAO;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB;AACrB;AACA;AACA;AACA,WAAW,wBAAwB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,IAAI,2DAAa;AACjB;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,IAAI,2DAAa;AACjB,YAAY,4DAAc;AAC1B,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;;AAEA;AACA,IAAI,2DAAa;AACjB,IAAI,2DAAa;AACjB,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,8DAAgB;AACpB;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,IAAI,8DAAgB;AACpB,YAAY,+DAAiB;AAC7B,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;;AAEA;AACA,IAAI,8DAAgB;AACpB,IAAI,8DAAgB;AACpB,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,4DAAc;AAC3B,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,4DAAc;AAC3B,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,4DAAc;AAC3B,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,4DAAc;AAC3B,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,+DAAiB;AAC9B,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,+DAAiB;AAC9B,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,+DAAiB;AAC9B,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,+DAAiB;AAC9B,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,2DAAa;AACjB,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;;AAEA;AACA,IAAI,8DAAgB;AACpB,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,2DAAa;AACjB;AACA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,2DAAa;AACjB;AACA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,2DAAa;AACjB;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,2DAAa;AACjB,IAAI,2DAAa;AACjB;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,2DAAa;AACjB;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,2DAAa;AACjB,IAAI,2DAAa;AACjB;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,8DAAgB;AACpB;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,8DAAgB;AACpB,IAAI,2DAAa;AACjB;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,8DAAgB;AACpB;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,8DAAgB;AACpB,IAAI,2DAAa;AACjB;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL,qBAAqB,eAAe;AACpC,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA,KAAK;AACL,iDAAiD,KAAK;AACtD;AACA;;AAEA;AACA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB,OAAO;AAC5B;AACA;;AAEA,qBAAqB,OAAO;AAC5B;AACA,uBAAuB,OAAO;AAC9B;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,GAAG,KAAK,GAAG,OAAO,GAAG,KAAK,GAAG;AACpD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,wBAAwB;AACxB;AACA;AACA;AACA,WAAW,mBAAmB;AAC9B;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA,QAAQ,gEAAO,OAAO,wBAAwB;AAC9C;AACA;AACA;AACA;AACA;;AAEA,2BAA2B;AAC3B;AACA;AACA;AACA,WAAW,mBAAmB;AAC9B;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA,QAAQ,gEAAO;AACf;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,YAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,kBAAkB;AACrC,qBAAqB,YAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB,OAAO;AAC5B,uBAAuB,OAAO;AAC9B,yBAAyB,OAAO;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,eAAe;AAClC,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;;AAEA;AACA,IAAI,wDAAU;AACd;AACA;AACA;AACA;AACA,0BAA0B,aAAa;AACvC,+BAA+B,gBAAgB;AAC/C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,oBAAoB;AACvC,+BAA+B,gBAAgB;AAC/C;AACA,0DAA0D,WAAW;AACrE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,oBAAoB;AACvC,4BAA4B,aAAa;AACzC;AACA,6DAA6D,WAAW;AACxE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,wDAAU;AACd,mBAAmB,iBAAiB;AACpC,qBAAqB,oBAAoB;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB,0DAAY;AAC9B;AACA,mBAAmB,wBAAwB;AAC3C;AACA,qBAAqB,2BAA2B;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,iBAAiB;AACtC,0BAA0B,uBAAuB;AACjD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,sDAAQ;AACvB;AACA,eAAe,yDAAW;AAC1B;AACA,eAAe,oDAAM;AACrB;AACA,2CAA2C,GAAG;AAC9C;AACA;;AAEA;AACA;AACA;AACA,eAAe,0DAAY;AAC3B;AACA,eAAe,6DAAe;AAC9B;AACA,eAAe,wDAAU;AACzB;AACA,2CAA2C,GAAG;AAC9C;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,GAAG;AAC9C;AACA;;AAEA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wCAAwC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2DAAa;AAC5B;AACA;AACA;AACA;AACA;AACA,eAAe,8DAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA,eAAe,yDAAW;AAC1B;AACA;AACA,2CAA2C,GAAG;AAC9C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,qBAAqB,qBAAqB;AAC1C;AACA;AACA;AACA;AACA;;AAEA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,yBAAyB;AACpC;AACA;AACA;AACA;AACA;AACA,QAAQ,yDAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4DAAc;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uDAAS;AACjB;AACA;AACA;AACA,2CAA2C,GAAG;AAC9C;AACA;;AAEA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,2DAAa;AAC/B,SAAS;AACT;AACA;AACA,QAAQ,wDAAU;AAClB;AACA;AACA;AACA;AACA,kBAAkB,8DAAgB;AAClC,SAAS;AACT;AACA;AACA,QAAQ,2DAAa;AACrB;AACA;AACA;AACA;AACA,kBAAkB,yDAAW;AAC7B,SAAS;AACT;AACA;AACA,QAAQ,sDAAQ;AAChB;AACA;AACA;AACA,2CAA2C,GAAG;AAC9C;AACA;;AAEA;AACA,WAAW,yEAAwB;AACnC;AACA;;AAEA;AACA;AACA;AACA,IAAI,sDAAa;AACjB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,uBAAuB,WAAW;AAClC;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,WAAW;AAChC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,IAAI,2DAAa;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI,2DAAa;AACjB,8BAA8B,4DAAc;AAC5C;AACA;AACA;AACA;;AAEA;AACA,IAAI,8DAAgB;AACpB,mBAAmB,eAAe;AAClC;AACA,qBAAqB,WAAW;AAChC;AACA;AACA,6BAA6B,kBAAkB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI,8DAAgB;AACpB,YAAY,+DAAiB;AAC7B,mBAAmB,eAAe;AAClC;AACA;AACA,YAAY,WAAW;AACvB;AACA;AACA;AACA,YAAY,sBAAsB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6EAAqB;;;;;;;;;;;;;AC/iDrB;AAAA;AAAA;AAAA;AAA2B;AACG;;AAEvB;AACP,WAAW,+CAAM;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+CAAG,UAAU,sBAAsB;;AAE3D;AACA;AACA;;AAEA,iBAAiB,cAAc;AAC/B;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA,gBAAgB,+CAAM;AACtB;;;;;;;;;;;;;AC1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC;;AAE3B;AACP,YAAY,sDAAQ;AACpB,iBAAiB,iBAAiB;AAClC,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;;AAEO;AACP,YAAY,sDAAQ;AACpB,iBAAiB,iBAAiB;AAClC,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA,iBAAiB,iBAAiB;AAClC,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;;AAEO;AACP,YAAY,sDAAQ;AACpB,iBAAiB,iBAAiB;AAClC,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;;AAEO;AACP,YAAY,sDAAQ;AACpB,iBAAiB,iBAAiB;AAClC,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA,iBAAiB,iBAAiB;AAClC,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,UAAU;AAC3B,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEO;AACP,iBAAiB,iBAAiB;AAClC,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;;AAEO;AACP,iBAAiB,iBAAiB;AAClC,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;;AAEO;AACP,iBAAiB,iBAAiB;AAClC,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;;AAEO;AACP;AACA,iBAAiB,iBAAiB;AAClC;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,iBAAiB,iBAAiB;AAClC,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;;AAEO;AACP;AACA,iBAAiB,oBAAoB;AACrC;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,iBAAiB,iBAAiB;AAClC,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA,iBAAiB,oBAAoB;AACrC,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;;AAEO;AACP,iBAAiB,iBAAiB;AAClC,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;;;;;;;;;;;;;ACnNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,aAAa;AACxB,YAAY;AACZ,YAAY;AACZ;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,aAAa;AACxB,YAAY;AACZ,YAAY;AACZ;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;AACA;;AAEO;AACP;A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AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACTA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsC;;AAE2B;AACA;;AAElD;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK,UAAU,4DAAU;AACzB;AACA,qBAAqB,cAAc;AACnC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa,cAAc;AAC3B,aAAa,cAAc;AAC3B,cAAc;AACd;AACA;AACA,SAAS,4DAAU,QAAQ,4DAAU;AACrC;AACA;;AAEA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzFA;AAAA;AAAe;AACf;AACA;AACA;AACA,kBAAkB,0BAA0B;AAC5C,KAAK;AACL,kBAAkB,iBAAiB;AACnC;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAA;AAG4B;AACqC;;AAElD,oCAAoC,0DAAc;AACjE;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM,2EAAgB;AACtB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,2EAAgB;AACrC;AACA;AACA,MAAM,QAAQ,2EAAgB,oBAAoB;AAClD;;AAEA;AACA;AACA,uBAAuB,2EAAgB;AACvC;AACA;AACA,QAAQ,GAAG,EAAE,2EAAgB,oBAAoB,EAAE;AACnD,KAAK;AACL,4BAA4B,EAAE,2EAAgB;AAC9C;AACA;AACA,UAAU,GAAG,EAAE,2EAAgB,qBAAqB,GAAG;AACvD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;;AAEA,qBAAqB,mEAAsB;AAC3C;AACA;AACA;;;;;;;;;;;;;ACrEA;AAAA;AAAA;AAAA;AAA+D;AAInC;;AAEb,mCAAmC,0DAAc;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM,2EAAgB;AACtB;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB,8BAA8B;AACjD;AACA;AACA;AACA,gBAAgB,2EAAgB;AAChC,SAAS;AACT;AACA,qBAAqB,2EAAgB;AACrC,oBAAoB;AACpB,WAAW;AACX,qBAAqB,2EAAgB;AACrC,oBAAoB,GAAG,IAAI,EAAE,eAAe,EAAE,SAAS;AACvD;AACA;;AAEA;AACA,sBAAsB,IAAI;AAC1B,SAAS;AACT,oBAAoB,IAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,GAAG;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA,gBAAgB,gDAAM;AACtB,gBAAgB,gDAAM;AACtB,iBAAiB,YAAY;AAC7B,mBAAmB,OAAO;AAC1B;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA,iBAAiB,6DAAmB;AACpC;AACA,wBAAwB,6DAAmB;;AAE3C;AACA;AACA,oBAAoB,uDAAK;AACzB;;;;;;;;;;;;;AC9HA;AAAA;AAAA;AAAA;AAG4B;AACqC;;AAElD,8BAA8B,0DAAc;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM,2EAAgB;AACtB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,2EAAgB;AACrC;AACA;AACA,MAAM,OAAO,2EAAgB,oBAAoB;AACjD;;AAEA;AACA;AACA;AACA,wBAAwB,2EAAgB;AACxC;AACA;AACA,QAAQ,GAAG,EAAE,2EAAgB,qBAAqB;AAClD,KAAK;AACL,6BAA6B,EAAE,2EAAgB;AAC/C;AACA;AACA,UAAU,GAAG,EAAE,2EAAgB,uBAAuB;AACtD;AACA,iDAAiD,GAAG;AACpD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;;AAEA,qBAAqB,mEAAsB;AAC3C;AACA;AACA;;;;;;;;;;;;;AC3EA;AAAA;AAAA;AAG4B;;AAEb,qCAAqC,0DAAc;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM,2EAAgB;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB,2EAAgB;AACtC,mBAAmB,0BAA0B,QAAQ,KAAK;AAC1D;AACA;AACA;AACA,sBAAsB,SAAS,GAAG,2EAAgB,0BAA0B;AAC5E;AACA,KAAK;AACL,gBAAgB,2EAAgB;AAChC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjFA;AAAA;AAAA;AAAA;AAG4B;AACS;;AAEtB,iCAAiC,0DAAc;AAC9D;AACA;AACA;AACA,aAAa,sBAAsB;AACnC,aAAa,qBAAqB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,MAAM,2EAAgB;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,2EAAgB;AACpC,mBAAmB,uCAAuC,QAAQ,KAAK;AACvE;AACA;AACA;AACA;AACA,cAAc,SAAS,GAAG,2EAAgB,0BAA0B;AACpE;AACA,KAAK;AACL,gBAAgB,2EAAgB;AAChC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,+DAAM;;AAE1B;AACA,iBAAiB,SAAS;AAC1B;AACA;;AAEA;AACA,yBAAyB,+DAAM;AAC/B;AACA;;;;;;;;;;;;AC/FA;AACA;;AAEA,CAAC;;AAED;AACA,MAAM,IAA2B;AACjC;;AAEA;AACA,QAAQ,KAA0B;AAClC;AACA;;AAEA;AACA;;AAEA;AACA,GAAG,MAAM,EAMN;;AAEH,CAAC;;AAED;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;AACA,KAAK;AACL;;AAEA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,mBAAmB;AACxC;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,oBAAoB;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,mBAAmB,4BAA4B;;AAE/C;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,6BAA6B;AAC7B,OAAO,yCAAyC,EAAE,UAAU,EAAE;AAC9D;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB,oBAAoB;;AAEpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,OAAO,OAAO;AAClC,oBAAoB,OAAO,OAAO;AAClC,oBAAoB,OAAO,OAAO;AAClC,oBAAoB,OAAO,OAAO;AAClC,oBAAoB,OAAO,OAAO;AAClC,oBAAoB,OAAO,OAAO;AAClC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK,uCAAuC,EAAE,UAAU,EAAE;AAC1D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;ACvgBY;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,uDAAuD;;AAEvD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;;AAEA,iBAAiB,wBAAwB;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAgB,KAAwC,GAAG,sBAAiB,GAAG,SAAI;;AAEnF;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,qEAAqE,qBAAqB,aAAa;;AAEvG;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AAC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","file":"module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./module.tsx\");\n","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(true);\n// Module\nexports.push([module.id, \".FieldSetEditor {\\n  margin-bottom: 25px;\\n}\\n\\n.ScatterFlex {\\n  display: flex;\\n  flex-wrap: nowrap;\\n  padding: 1px;\\n}\\n\\n.ScatterSize {\\n  width: 115px;\\n}\\n\\n.ScatterSize input {\\n  width: 55px;\\n}\\n\\n.ScatterDotSize {\\n  width: 220px;\\n}\\n\\n.ScatterDotColor {\\n  padding-top: 7px;\\n}\\n\\n.ScatterSelect {\\n  display: flex;\\n  min-width: 160px;\\n}\\n\\n.ScatterExtents {\\n  display: flex;\\n}\\n\\n.ScatterExtentLimit {\\n  width: 180px;\\n  padding-right: 20px;\\n}\\n\\n.ScatterMargins {\\n  display: flex;\\n}\\n\\n.ScatterMarginLimit {\\n  width: 180px;\\n  padding-right: 20px;\\n}\\n\\n.ScatterLabel {\\n  padding-top: 6px;\\n  width: 85px;\\n  color: #9fa7b3;\\n  font-size: 12px;\\n  text-align: center;\\n}\\n\\n.ScatterCheckbox {\\n  padding-top: 6px;\\n  padding-left: 5px;\\n  width: 55px;\\n  color: #9fa7b3;\\n  font-size: 12px;\\n}\\n\\n.ScatterFlex label {\\n  margin-top: 5px;\\n}\\n\\n.ScatterSetHidden {\\n  fill: rgba(119, 119, 119, 0.25);\\n}\\n\\n.ScatterLine {\\n  fill: none;\\n}\\n\\n.ScatterLineHidden {\\n  opacity: 0.25;\\n  stroke-width: 1px;\\n}\\n\\n.TitleEditor {\\n  display: flex;\\n}\\n\\n.TitleText {\\n  width: 160px;\\n}\\n\\n.TitleColor {\\n  padding-top: 7px;\\n}\\n\\n.LabelEditor {\\n  display: flex;\\n}\\n\\n.LabelColor {\\n  padding-top: 7px;\\n}\\n\\n.ScatterLegend input {\\n  width: 50px;\\n}\\n\\n.ScatterLegendText {\\n  border: 1px solid white;\\n}\\n\\n.ScatterLegendTextHidden {\\n  fill: rgba(119, 119, 119, 0.25);\\n}\", \"\",{\"version\":3,\"sources\":[\"ScatterPanel.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,iBAAiB;EACjB,YAAY;AACd;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,gBAAgB;AAClB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,YAAY;EACZ,mBAAmB;AACrB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,YAAY;EACZ,mBAAmB;AACrB;;AAEA;EACE,gBAAgB;EAChB,WAAW;EACX,cAAc;EACd,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,gBAAgB;EAChB,iBAAiB;EACjB,WAAW;EACX,cAAc;EACd,eAAe;AACjB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,+BAA+B;AACjC;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,aAAa;EACb,iBAAiB;AACnB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,+BAA+B;AACjC\",\"file\":\"ScatterPanel.css\",\"sourcesContent\":[\".FieldSetEditor {\\n  margin-bottom: 25px;\\n}\\n\\n.ScatterFlex {\\n  display: flex;\\n  flex-wrap: nowrap;\\n  padding: 1px;\\n}\\n\\n.ScatterSize {\\n  width: 115px;\\n}\\n\\n.ScatterSize input {\\n  width: 55px;\\n}\\n\\n.ScatterDotSize {\\n  width: 220px;\\n}\\n\\n.ScatterDotColor {\\n  padding-top: 7px;\\n}\\n\\n.ScatterSelect {\\n  display: flex;\\n  min-width: 160px;\\n}\\n\\n.ScatterExtents {\\n  display: flex;\\n}\\n\\n.ScatterExtentLimit {\\n  width: 180px;\\n  padding-right: 20px;\\n}\\n\\n.ScatterMargins {\\n  display: flex;\\n}\\n\\n.ScatterMarginLimit {\\n  width: 180px;\\n  padding-right: 20px;\\n}\\n\\n.ScatterLabel {\\n  padding-top: 6px;\\n  width: 85px;\\n  color: #9fa7b3;\\n  font-size: 12px;\\n  text-align: center;\\n}\\n\\n.ScatterCheckbox {\\n  padding-top: 6px;\\n  padding-left: 5px;\\n  width: 55px;\\n  color: #9fa7b3;\\n  font-size: 12px;\\n}\\n\\n.ScatterFlex label {\\n  margin-top: 5px;\\n}\\n\\n.ScatterSetHidden {\\n  fill: rgba(119, 119, 119, 0.25);\\n}\\n\\n.ScatterLine {\\n  fill: none;\\n}\\n\\n.ScatterLineHidden {\\n  opacity: 0.25;\\n  stroke-width: 1px;\\n}\\n\\n.TitleEditor {\\n  display: flex;\\n}\\n\\n.TitleText {\\n  width: 160px;\\n}\\n\\n.TitleColor {\\n  padding-top: 7px;\\n}\\n\\n.LabelEditor {\\n  display: flex;\\n}\\n\\n.LabelColor {\\n  padding-top: 7px;\\n}\\n\\n.ScatterLegend input {\\n  width: 50px;\\n}\\n\\n.ScatterLegendText {\\n  border: 1px solid white;\\n}\\n\\n.ScatterLegendTextHidden {\\n  fill: rgba(119, 119, 119, 0.25);\\n}\"]}]);\n// Exports\nmodule.exports = exports;\n","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (useSourceMap) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item, useSourceMap);\n\n      if (item[2]) {\n        return \"@media \".concat(item[2], \" {\").concat(content, \"}\");\n      }\n\n      return content;\n    }).join('');\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery, dedupe) {\n    if (typeof modules === 'string') {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, '']];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var i = 0; i < this.length; i++) {\n        // eslint-disable-next-line prefer-destructuring\n        var id = this[i][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = [].concat(modules[_i]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      if (mediaQuery) {\n        if (!item[2]) {\n          item[2] = mediaQuery;\n        } else {\n          item[2] = \"\".concat(mediaQuery, \" and \").concat(item[2]);\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n  var content = item[1] || ''; // eslint-disable-next-line prefer-destructuring\n\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (useSourceMap && typeof btoa === 'function') {\n    var sourceMapping = toComment(cssMapping);\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return \"/*# sourceURL=\".concat(cssMapping.sourceRoot || '').concat(source, \" */\");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n  }\n\n  return [content].join('\\n');\n} // Adapted from convert-source-map (MIT)\n\n\nfunction toComment(sourceMap) {\n  // eslint-disable-next-line no-undef\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n  var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n  return \"/*# \".concat(data, \" */\");\n}","const toString = Object.prototype.toString;\n\nexport default function isAnyArray(object) {\n  return toString.call(object).endsWith('Array]');\n}\n","(function(){function a(d){for(var e=0,f=d.length-1,g=void 0,h=void 0,i=void 0,j=c(e,f);!0;){if(f<=e)return d[j];if(f==e+1)return d[e]>d[f]&&b(d,e,f),d[j];for(g=c(e,f),d[g]>d[f]&&b(d,g,f),d[e]>d[f]&&b(d,e,f),d[g]>d[e]&&b(d,g,e),b(d,g,e+1),h=e+1,i=f;!0;){do h++;while(d[e]>d[h]);do i--;while(d[i]>d[e]);if(i<h)break;b(d,h,i)}b(d,e,i),i<=j&&(e=h),i>=j&&(f=i-1)}}var b=function b(d,e,f){var _ref;return _ref=[d[f],d[e]],d[e]=_ref[0],d[f]=_ref[1],_ref},c=function c(d,e){return~~((d+e)/2)};'undefined'!=typeof module&&module.exports?module.exports=a:window.median=a})();\n","import isArray from 'is-any-array';\n\nfunction max(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var _options$fromIndex = options.fromIndex,\n      fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex,\n      _options$toIndex = options.toIndex,\n      toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;\n\n  if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n\n  if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {\n    throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');\n  }\n\n  var maxValue = input[fromIndex];\n\n  for (var i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] > maxValue) maxValue = input[i];\n  }\n\n  return maxValue;\n}\n\nexport default max;\n","import isArray from 'is-any-array';\nimport quickSelectMedian from 'median-quickselect';\n\nfunction median(input) {\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  return quickSelectMedian(input.slice());\n}\n\nexport default median;\n","import isArray from 'is-any-array';\n\nfunction min(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var _options$fromIndex = options.fromIndex,\n      fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex,\n      _options$toIndex = options.toIndex,\n      toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;\n\n  if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n\n  if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {\n    throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');\n  }\n\n  var minValue = input[fromIndex];\n\n  for (var i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] < minValue) minValue = input[i];\n  }\n\n  return minValue;\n}\n\nexport default min;\n","import isArray from 'is-any-array';\nimport max from 'ml-array-max';\nimport min from 'ml-array-min';\n\nfunction rescale(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  } else if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var output;\n\n  if (options.output !== undefined) {\n    if (!isArray(options.output)) {\n      throw new TypeError('output option must be an array if specified');\n    }\n\n    output = options.output;\n  } else {\n    output = new Array(input.length);\n  }\n\n  var currentMin = min(input);\n  var currentMax = max(input);\n\n  if (currentMin === currentMax) {\n    throw new RangeError('minimum and maximum input values are equal. Cannot rescale a constant array');\n  }\n\n  var _options$min = options.min,\n      minValue = _options$min === void 0 ? options.autoMinMax ? currentMin : 0 : _options$min,\n      _options$max = options.max,\n      maxValue = _options$max === void 0 ? options.autoMinMax ? currentMax : 1 : _options$max;\n\n  if (minValue >= maxValue) {\n    throw new RangeError('min option must be smaller than max option');\n  }\n\n  var factor = (maxValue - minValue) / (currentMax - currentMin);\n\n  for (var i = 0; i < input.length; i++) {\n    output[i] = (input[i] - currentMin) * factor + minValue;\n  }\n\n  return output;\n}\n\nexport { rescale as default };\n","import Matrix from './matrix';\n\nexport function correlation(xMatrix, yMatrix = xMatrix, options = {}) {\n  xMatrix = new Matrix(xMatrix);\n  let yIsSame = false;\n  if (\n    typeof yMatrix === 'object' &&\n    !Matrix.isMatrix(yMatrix) &&\n    !Array.isArray(yMatrix)\n  ) {\n    options = yMatrix;\n    yMatrix = xMatrix;\n    yIsSame = true;\n  } else {\n    yMatrix = new Matrix(yMatrix);\n  }\n  if (xMatrix.rows !== yMatrix.rows) {\n    throw new TypeError('Both matrices must have the same number of rows');\n  }\n\n  const { center = true, scale = true } = options;\n  if (center) {\n    xMatrix.center('column');\n    if (!yIsSame) {\n      yMatrix.center('column');\n    }\n  }\n  if (scale) {\n    xMatrix.scale('column');\n    if (!yIsSame) {\n      yMatrix.scale('column');\n    }\n  }\n\n  const sdx = xMatrix.standardDeviation('column', { unbiased: true });\n  const sdy = yIsSame\n    ? sdx\n    : yMatrix.standardDeviation('column', { unbiased: true });\n\n  const corr = xMatrix.transpose().mmul(yMatrix);\n  for (let i = 0; i < corr.rows; i++) {\n    for (let j = 0; j < corr.columns; j++) {\n      corr.set(\n        i,\n        j,\n        corr.get(i, j) * (1 / (sdx[i] * sdy[j])) * (1 / (xMatrix.rows - 1)),\n      );\n    }\n  }\n  return corr;\n}\n","import Matrix from './matrix';\n\nexport function covariance(xMatrix, yMatrix = xMatrix, options = {}) {\n  xMatrix = new Matrix(xMatrix);\n  let yIsSame = false;\n  if (\n    typeof yMatrix === 'object' &&\n    !Matrix.isMatrix(yMatrix) &&\n    !Array.isArray(yMatrix)\n  ) {\n    options = yMatrix;\n    yMatrix = xMatrix;\n    yIsSame = true;\n  } else {\n    yMatrix = new Matrix(yMatrix);\n  }\n  if (xMatrix.rows !== yMatrix.rows) {\n    throw new TypeError('Both matrices must have the same number of rows');\n  }\n  const { center = true } = options;\n  if (center) {\n    xMatrix = xMatrix.center('column');\n    if (!yIsSame) {\n      yMatrix = yMatrix.center('column');\n    }\n  }\n  const cov = xMatrix.transpose().mmul(yMatrix);\n  for (let i = 0; i < cov.rows; i++) {\n    for (let j = 0; j < cov.columns; j++) {\n      cov.set(i, j, cov.get(i, j) * (1 / (xMatrix.rows - 1)));\n    }\n  }\n  return cov;\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nexport default class CholeskyDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n    if (!value.isSymmetric()) {\n      throw new Error('Matrix is not symmetric');\n    }\n\n    let a = value;\n    let dimension = a.rows;\n    let l = new Matrix(dimension, dimension);\n    let positiveDefinite = true;\n    let i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n      let d = 0;\n      for (k = 0; k < j; k++) {\n        let s = 0;\n        for (i = 0; i < k; i++) {\n          s += l.get(k, i) * l.get(j, i);\n        }\n        s = (a.get(j, k) - s) / l.get(k, k);\n        l.set(j, k, s);\n        d = d + s * s;\n      }\n\n      d = a.get(j, j) - d;\n\n      positiveDefinite &= d > 0;\n      l.set(j, j, Math.sqrt(Math.max(d, 0)));\n      for (k = j + 1; k < dimension; k++) {\n        l.set(j, k, 0);\n      }\n    }\n\n    this.L = l;\n    this.positiveDefinite = Boolean(positiveDefinite);\n  }\n\n  isPositiveDefinite() {\n    return this.positiveDefinite;\n  }\n\n  solve(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let l = this.L;\n    let dimension = l.rows;\n\n    if (value.rows !== dimension) {\n      throw new Error('Matrix dimensions do not match');\n    }\n    if (this.isPositiveDefinite() === false) {\n      throw new Error('Matrix is not positive definite');\n    }\n\n    let count = value.columns;\n    let B = value.clone();\n    let i, j, k;\n\n    for (k = 0; k < dimension; k++) {\n      for (j = 0; j < count; j++) {\n        for (i = 0; i < k; i++) {\n          B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(k, i));\n        }\n        B.set(k, j, B.get(k, j) / l.get(k, k));\n      }\n    }\n\n    for (k = dimension - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        for (i = k + 1; i < dimension; i++) {\n          B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(i, k));\n        }\n        B.set(k, j, B.get(k, j) / l.get(k, k));\n      }\n    }\n\n    return B;\n  }\n\n  get lowerTriangularMatrix() {\n    return this.L;\n  }\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nimport { hypotenuse } from './util';\n\nexport default class EigenvalueDecomposition {\n  constructor(matrix, options = {}) {\n    const { assumeSymmetric = false } = options;\n\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n      throw new Error('Matrix is not a square matrix');\n    }\n\n    if (matrix.isEmpty()) {\n      throw new Error('Matrix must be non-empty');\n    }\n\n    let n = matrix.columns;\n    let V = new Matrix(n, n);\n    let d = new Float64Array(n);\n    let e = new Float64Array(n);\n    let value = matrix;\n    let i, j;\n\n    let isSymmetric = false;\n    if (assumeSymmetric) {\n      isSymmetric = true;\n    } else {\n      isSymmetric = matrix.isSymmetric();\n    }\n\n    if (isSymmetric) {\n      for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          V.set(i, j, value.get(i, j));\n        }\n      }\n      tred2(n, e, d, V);\n      tql2(n, e, d, V);\n    } else {\n      let H = new Matrix(n, n);\n      let ort = new Float64Array(n);\n      for (j = 0; j < n; j++) {\n        for (i = 0; i < n; i++) {\n          H.set(i, j, value.get(i, j));\n        }\n      }\n      orthes(n, H, ort, V);\n      hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n  }\n\n  get realEigenvalues() {\n    return Array.from(this.d);\n  }\n\n  get imaginaryEigenvalues() {\n    return Array.from(this.e);\n  }\n\n  get eigenvectorMatrix() {\n    return this.V;\n  }\n\n  get diagonalMatrix() {\n    let n = this.n;\n    let e = this.e;\n    let d = this.d;\n    let X = new Matrix(n, n);\n    let i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        X.set(i, j, 0);\n      }\n      X.set(i, i, d[i]);\n      if (e[i] > 0) {\n        X.set(i, i + 1, e[i]);\n      } else if (e[i] < 0) {\n        X.set(i, i - 1, e[i]);\n      }\n    }\n    return X;\n  }\n}\n\nfunction tred2(n, e, d, V) {\n  let f, g, h, i, j, k, hh, scale;\n\n  for (j = 0; j < n; j++) {\n    d[j] = V.get(n - 1, j);\n  }\n\n  for (i = n - 1; i > 0; i--) {\n    scale = 0;\n    h = 0;\n    for (k = 0; k < i; k++) {\n      scale = scale + Math.abs(d[k]);\n    }\n\n    if (scale === 0) {\n      e[i] = d[i - 1];\n      for (j = 0; j < i; j++) {\n        d[j] = V.get(i - 1, j);\n        V.set(i, j, 0);\n        V.set(j, i, 0);\n      }\n    } else {\n      for (k = 0; k < i; k++) {\n        d[k] /= scale;\n        h += d[k] * d[k];\n      }\n\n      f = d[i - 1];\n      g = Math.sqrt(h);\n      if (f > 0) {\n        g = -g;\n      }\n\n      e[i] = scale * g;\n      h = h - f * g;\n      d[i - 1] = f - g;\n      for (j = 0; j < i; j++) {\n        e[j] = 0;\n      }\n\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        V.set(j, i, f);\n        g = e[j] + V.get(j, j) * f;\n        for (k = j + 1; k <= i - 1; k++) {\n          g += V.get(k, j) * d[k];\n          e[k] += V.get(k, j) * f;\n        }\n        e[j] = g;\n      }\n\n      f = 0;\n      for (j = 0; j < i; j++) {\n        e[j] /= h;\n        f += e[j] * d[j];\n      }\n\n      hh = f / (h + h);\n      for (j = 0; j < i; j++) {\n        e[j] -= hh * d[j];\n      }\n\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        g = e[j];\n        for (k = j; k <= i - 1; k++) {\n          V.set(k, j, V.get(k, j) - (f * e[k] + g * d[k]));\n        }\n        d[j] = V.get(i - 1, j);\n        V.set(i, j, 0);\n      }\n    }\n    d[i] = h;\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    V.set(n - 1, i, V.get(i, i));\n    V.set(i, i, 1);\n    h = d[i + 1];\n    if (h !== 0) {\n      for (k = 0; k <= i; k++) {\n        d[k] = V.get(k, i + 1) / h;\n      }\n\n      for (j = 0; j <= i; j++) {\n        g = 0;\n        for (k = 0; k <= i; k++) {\n          g += V.get(k, i + 1) * V.get(k, j);\n        }\n        for (k = 0; k <= i; k++) {\n          V.set(k, j, V.get(k, j) - g * d[k]);\n        }\n      }\n    }\n\n    for (k = 0; k <= i; k++) {\n      V.set(k, i + 1, 0);\n    }\n  }\n\n  for (j = 0; j < n; j++) {\n    d[j] = V.get(n - 1, j);\n    V.set(n - 1, j, 0);\n  }\n\n  V.set(n - 1, n - 1, 1);\n  e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n  let g, h, i, j, k, l, m, p, r, dl1, c, c2, c3, el1, s, s2, iter;\n\n  for (i = 1; i < n; i++) {\n    e[i - 1] = e[i];\n  }\n\n  e[n - 1] = 0;\n\n  let f = 0;\n  let tst1 = 0;\n  let eps = Number.EPSILON;\n\n  for (l = 0; l < n; l++) {\n    tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n    m = l;\n    while (m < n) {\n      if (Math.abs(e[m]) <= eps * tst1) {\n        break;\n      }\n      m++;\n    }\n\n    if (m > l) {\n      iter = 0;\n      do {\n        iter = iter + 1;\n\n        g = d[l];\n        p = (d[l + 1] - g) / (2 * e[l]);\n        r = hypotenuse(p, 1);\n        if (p < 0) {\n          r = -r;\n        }\n\n        d[l] = e[l] / (p + r);\n        d[l + 1] = e[l] * (p + r);\n        dl1 = d[l + 1];\n        h = g - d[l];\n        for (i = l + 2; i < n; i++) {\n          d[i] -= h;\n        }\n\n        f = f + h;\n\n        p = d[m];\n        c = 1;\n        c2 = c;\n        c3 = c;\n        el1 = e[l + 1];\n        s = 0;\n        s2 = 0;\n        for (i = m - 1; i >= l; i--) {\n          c3 = c2;\n          c2 = c;\n          s2 = s;\n          g = c * e[i];\n          h = c * p;\n          r = hypotenuse(p, e[i]);\n          e[i + 1] = s * r;\n          s = e[i] / r;\n          c = p / r;\n          p = c * d[i] - s * g;\n          d[i + 1] = h + s * (c * g + s * d[i]);\n\n          for (k = 0; k < n; k++) {\n            h = V.get(k, i + 1);\n            V.set(k, i + 1, s * V.get(k, i) + c * h);\n            V.set(k, i, c * V.get(k, i) - s * h);\n          }\n        }\n\n        p = (-s * s2 * c3 * el1 * e[l]) / dl1;\n        e[l] = s * p;\n        d[l] = c * p;\n      } while (Math.abs(e[l]) > eps * tst1);\n    }\n    d[l] = d[l] + f;\n    e[l] = 0;\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    k = i;\n    p = d[i];\n    for (j = i + 1; j < n; j++) {\n      if (d[j] < p) {\n        k = j;\n        p = d[j];\n      }\n    }\n\n    if (k !== i) {\n      d[k] = d[i];\n      d[i] = p;\n      for (j = 0; j < n; j++) {\n        p = V.get(j, i);\n        V.set(j, i, V.get(j, k));\n        V.set(j, k, p);\n      }\n    }\n  }\n}\n\nfunction orthes(n, H, ort, V) {\n  let low = 0;\n  let high = n - 1;\n  let f, g, h, i, j, m;\n  let scale;\n\n  for (m = low + 1; m <= high - 1; m++) {\n    scale = 0;\n    for (i = m; i <= high; i++) {\n      scale = scale + Math.abs(H.get(i, m - 1));\n    }\n\n    if (scale !== 0) {\n      h = 0;\n      for (i = high; i >= m; i--) {\n        ort[i] = H.get(i, m - 1) / scale;\n        h += ort[i] * ort[i];\n      }\n\n      g = Math.sqrt(h);\n      if (ort[m] > 0) {\n        g = -g;\n      }\n\n      h = h - ort[m] * g;\n      ort[m] = ort[m] - g;\n\n      for (j = m; j < n; j++) {\n        f = 0;\n        for (i = high; i >= m; i--) {\n          f += ort[i] * H.get(i, j);\n        }\n\n        f = f / h;\n        for (i = m; i <= high; i++) {\n          H.set(i, j, H.get(i, j) - f * ort[i]);\n        }\n      }\n\n      for (i = 0; i <= high; i++) {\n        f = 0;\n        for (j = high; j >= m; j--) {\n          f += ort[j] * H.get(i, j);\n        }\n\n        f = f / h;\n        for (j = m; j <= high; j++) {\n          H.set(i, j, H.get(i, j) - f * ort[j]);\n        }\n      }\n\n      ort[m] = scale * ort[m];\n      H.set(m, m - 1, scale * g);\n    }\n  }\n\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      V.set(i, j, i === j ? 1 : 0);\n    }\n  }\n\n  for (m = high - 1; m >= low + 1; m--) {\n    if (H.get(m, m - 1) !== 0) {\n      for (i = m + 1; i <= high; i++) {\n        ort[i] = H.get(i, m - 1);\n      }\n\n      for (j = m; j <= high; j++) {\n        g = 0;\n        for (i = m; i <= high; i++) {\n          g += ort[i] * V.get(i, j);\n        }\n\n        g = g / ort[m] / H.get(m, m - 1);\n        for (i = m; i <= high; i++) {\n          V.set(i, j, V.get(i, j) + g * ort[i]);\n        }\n      }\n    }\n  }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n  let n = nn - 1;\n  let low = 0;\n  let high = nn - 1;\n  let eps = Number.EPSILON;\n  let exshift = 0;\n  let norm = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let z = 0;\n  let iter = 0;\n  let i, j, k, l, m, t, w, x, y;\n  let ra, sa, vr, vi;\n  let notlast, cdivres;\n\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      d[i] = H.get(i, i);\n      e[i] = 0;\n    }\n\n    for (j = Math.max(i - 1, 0); j < nn; j++) {\n      norm = norm + Math.abs(H.get(i, j));\n    }\n  }\n\n  while (n >= low) {\n    l = n;\n    while (l > low) {\n      s = Math.abs(H.get(l - 1, l - 1)) + Math.abs(H.get(l, l));\n      if (s === 0) {\n        s = norm;\n      }\n      if (Math.abs(H.get(l, l - 1)) < eps * s) {\n        break;\n      }\n      l--;\n    }\n\n    if (l === n) {\n      H.set(n, n, H.get(n, n) + exshift);\n      d[n] = H.get(n, n);\n      e[n] = 0;\n      n--;\n      iter = 0;\n    } else if (l === n - 1) {\n      w = H.get(n, n - 1) * H.get(n - 1, n);\n      p = (H.get(n - 1, n - 1) - H.get(n, n)) / 2;\n      q = p * p + w;\n      z = Math.sqrt(Math.abs(q));\n      H.set(n, n, H.get(n, n) + exshift);\n      H.set(n - 1, n - 1, H.get(n - 1, n - 1) + exshift);\n      x = H.get(n, n);\n\n      if (q >= 0) {\n        z = p >= 0 ? p + z : p - z;\n        d[n - 1] = x + z;\n        d[n] = d[n - 1];\n        if (z !== 0) {\n          d[n] = x - w / z;\n        }\n        e[n - 1] = 0;\n        e[n] = 0;\n        x = H.get(n, n - 1);\n        s = Math.abs(x) + Math.abs(z);\n        p = x / s;\n        q = z / s;\n        r = Math.sqrt(p * p + q * q);\n        p = p / r;\n        q = q / r;\n\n        for (j = n - 1; j < nn; j++) {\n          z = H.get(n - 1, j);\n          H.set(n - 1, j, q * z + p * H.get(n, j));\n          H.set(n, j, q * H.get(n, j) - p * z);\n        }\n\n        for (i = 0; i <= n; i++) {\n          z = H.get(i, n - 1);\n          H.set(i, n - 1, q * z + p * H.get(i, n));\n          H.set(i, n, q * H.get(i, n) - p * z);\n        }\n\n        for (i = low; i <= high; i++) {\n          z = V.get(i, n - 1);\n          V.set(i, n - 1, q * z + p * V.get(i, n));\n          V.set(i, n, q * V.get(i, n) - p * z);\n        }\n      } else {\n        d[n - 1] = x + p;\n        d[n] = x + p;\n        e[n - 1] = z;\n        e[n] = -z;\n      }\n\n      n = n - 2;\n      iter = 0;\n    } else {\n      x = H.get(n, n);\n      y = 0;\n      w = 0;\n      if (l < n) {\n        y = H.get(n - 1, n - 1);\n        w = H.get(n, n - 1) * H.get(n - 1, n);\n      }\n\n      if (iter === 10) {\n        exshift += x;\n        for (i = low; i <= n; i++) {\n          H.set(i, i, H.get(i, i) - x);\n        }\n        s = Math.abs(H.get(n, n - 1)) + Math.abs(H.get(n - 1, n - 2));\n        x = y = 0.75 * s;\n        w = -0.4375 * s * s;\n      }\n\n      if (iter === 30) {\n        s = (y - x) / 2;\n        s = s * s + w;\n        if (s > 0) {\n          s = Math.sqrt(s);\n          if (y < x) {\n            s = -s;\n          }\n          s = x - w / ((y - x) / 2 + s);\n          for (i = low; i <= n; i++) {\n            H.set(i, i, H.get(i, i) - s);\n          }\n          exshift += s;\n          x = y = w = 0.964;\n        }\n      }\n\n      iter = iter + 1;\n\n      m = n - 2;\n      while (m >= l) {\n        z = H.get(m, m);\n        r = x - z;\n        s = y - z;\n        p = (r * s - w) / H.get(m + 1, m) + H.get(m, m + 1);\n        q = H.get(m + 1, m + 1) - z - r - s;\n        r = H.get(m + 2, m + 1);\n        s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n        p = p / s;\n        q = q / s;\n        r = r / s;\n        if (m === l) {\n          break;\n        }\n        if (\n          Math.abs(H.get(m, m - 1)) * (Math.abs(q) + Math.abs(r)) <\n          eps *\n            (Math.abs(p) *\n              (Math.abs(H.get(m - 1, m - 1)) +\n                Math.abs(z) +\n                Math.abs(H.get(m + 1, m + 1))))\n        ) {\n          break;\n        }\n        m--;\n      }\n\n      for (i = m + 2; i <= n; i++) {\n        H.set(i, i - 2, 0);\n        if (i > m + 2) {\n          H.set(i, i - 3, 0);\n        }\n      }\n\n      for (k = m; k <= n - 1; k++) {\n        notlast = k !== n - 1;\n        if (k !== m) {\n          p = H.get(k, k - 1);\n          q = H.get(k + 1, k - 1);\n          r = notlast ? H.get(k + 2, k - 1) : 0;\n          x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n          if (x !== 0) {\n            p = p / x;\n            q = q / x;\n            r = r / x;\n          }\n        }\n\n        if (x === 0) {\n          break;\n        }\n\n        s = Math.sqrt(p * p + q * q + r * r);\n        if (p < 0) {\n          s = -s;\n        }\n\n        if (s !== 0) {\n          if (k !== m) {\n            H.set(k, k - 1, -s * x);\n          } else if (l !== m) {\n            H.set(k, k - 1, -H.get(k, k - 1));\n          }\n\n          p = p + s;\n          x = p / s;\n          y = q / s;\n          z = r / s;\n          q = q / p;\n          r = r / p;\n\n          for (j = k; j < nn; j++) {\n            p = H.get(k, j) + q * H.get(k + 1, j);\n            if (notlast) {\n              p = p + r * H.get(k + 2, j);\n              H.set(k + 2, j, H.get(k + 2, j) - p * z);\n            }\n\n            H.set(k, j, H.get(k, j) - p * x);\n            H.set(k + 1, j, H.get(k + 1, j) - p * y);\n          }\n\n          for (i = 0; i <= Math.min(n, k + 3); i++) {\n            p = x * H.get(i, k) + y * H.get(i, k + 1);\n            if (notlast) {\n              p = p + z * H.get(i, k + 2);\n              H.set(i, k + 2, H.get(i, k + 2) - p * r);\n            }\n\n            H.set(i, k, H.get(i, k) - p);\n            H.set(i, k + 1, H.get(i, k + 1) - p * q);\n          }\n\n          for (i = low; i <= high; i++) {\n            p = x * V.get(i, k) + y * V.get(i, k + 1);\n            if (notlast) {\n              p = p + z * V.get(i, k + 2);\n              V.set(i, k + 2, V.get(i, k + 2) - p * r);\n            }\n\n            V.set(i, k, V.get(i, k) - p);\n            V.set(i, k + 1, V.get(i, k + 1) - p * q);\n          }\n        }\n      }\n    }\n  }\n\n  if (norm === 0) {\n    return;\n  }\n\n  for (n = nn - 1; n >= 0; n--) {\n    p = d[n];\n    q = e[n];\n\n    if (q === 0) {\n      l = n;\n      H.set(n, n, 1);\n      for (i = n - 1; i >= 0; i--) {\n        w = H.get(i, i) - p;\n        r = 0;\n        for (j = l; j <= n; j++) {\n          r = r + H.get(i, j) * H.get(j, n);\n        }\n\n        if (e[i] < 0) {\n          z = w;\n          s = r;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            H.set(i, n, w !== 0 ? -r / w : -r / (eps * norm));\n          } else {\n            x = H.get(i, i + 1);\n            y = H.get(i + 1, i);\n            q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n            t = (x * s - z * r) / q;\n            H.set(i, n, t);\n            H.set(\n              i + 1,\n              n,\n              Math.abs(x) > Math.abs(z) ? (-r - w * t) / x : (-s - y * t) / z,\n            );\n          }\n\n          t = Math.abs(H.get(i, n));\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H.set(j, n, H.get(j, n) / t);\n            }\n          }\n        }\n      }\n    } else if (q < 0) {\n      l = n - 1;\n\n      if (Math.abs(H.get(n, n - 1)) > Math.abs(H.get(n - 1, n))) {\n        H.set(n - 1, n - 1, q / H.get(n, n - 1));\n        H.set(n - 1, n, -(H.get(n, n) - p) / H.get(n, n - 1));\n      } else {\n        cdivres = cdiv(0, -H.get(n - 1, n), H.get(n - 1, n - 1) - p, q);\n        H.set(n - 1, n - 1, cdivres[0]);\n        H.set(n - 1, n, cdivres[1]);\n      }\n\n      H.set(n, n - 1, 0);\n      H.set(n, n, 1);\n      for (i = n - 2; i >= 0; i--) {\n        ra = 0;\n        sa = 0;\n        for (j = l; j <= n; j++) {\n          ra = ra + H.get(i, j) * H.get(j, n - 1);\n          sa = sa + H.get(i, j) * H.get(j, n);\n        }\n\n        w = H.get(i, i) - p;\n\n        if (e[i] < 0) {\n          z = w;\n          r = ra;\n          s = sa;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            cdivres = cdiv(-ra, -sa, w, q);\n            H.set(i, n - 1, cdivres[0]);\n            H.set(i, n, cdivres[1]);\n          } else {\n            x = H.get(i, i + 1);\n            y = H.get(i + 1, i);\n            vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n            vi = (d[i] - p) * 2 * q;\n            if (vr === 0 && vi === 0) {\n              vr =\n                eps *\n                norm *\n                (Math.abs(w) +\n                  Math.abs(q) +\n                  Math.abs(x) +\n                  Math.abs(y) +\n                  Math.abs(z));\n            }\n            cdivres = cdiv(\n              x * r - z * ra + q * sa,\n              x * s - z * sa - q * ra,\n              vr,\n              vi,\n            );\n            H.set(i, n - 1, cdivres[0]);\n            H.set(i, n, cdivres[1]);\n            if (Math.abs(x) > Math.abs(z) + Math.abs(q)) {\n              H.set(\n                i + 1,\n                n - 1,\n                (-ra - w * H.get(i, n - 1) + q * H.get(i, n)) / x,\n              );\n              H.set(\n                i + 1,\n                n,\n                (-sa - w * H.get(i, n) - q * H.get(i, n - 1)) / x,\n              );\n            } else {\n              cdivres = cdiv(\n                -r - y * H.get(i, n - 1),\n                -s - y * H.get(i, n),\n                z,\n                q,\n              );\n              H.set(i + 1, n - 1, cdivres[0]);\n              H.set(i + 1, n, cdivres[1]);\n            }\n          }\n\n          t = Math.max(Math.abs(H.get(i, n - 1)), Math.abs(H.get(i, n)));\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H.set(j, n - 1, H.get(j, n - 1) / t);\n              H.set(j, n, H.get(j, n) / t);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      for (j = i; j < nn; j++) {\n        V.set(i, j, H.get(i, j));\n      }\n    }\n  }\n\n  for (j = nn - 1; j >= low; j--) {\n    for (i = low; i <= high; i++) {\n      z = 0;\n      for (k = low; k <= Math.min(j, high); k++) {\n        z = z + V.get(i, k) * H.get(k, j);\n      }\n      V.set(i, j, z);\n    }\n  }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n  let r, d;\n  if (Math.abs(yr) > Math.abs(yi)) {\n    r = yi / yr;\n    d = yr + r * yi;\n    return [(xr + r * xi) / d, (xi - r * xr) / d];\n  } else {\n    r = yr / yi;\n    d = yi + r * yr;\n    return [(r * xr + xi) / d, (r * xi - xr) / d];\n  }\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nexport default class LuDecomposition {\n  constructor(matrix) {\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n\n    let lu = matrix.clone();\n    let rows = lu.rows;\n    let columns = lu.columns;\n    let pivotVector = new Float64Array(rows);\n    let pivotSign = 1;\n    let i, j, k, p, s, t, v;\n    let LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n      pivotVector[i] = i;\n    }\n\n    LUcolj = new Float64Array(rows);\n\n    for (j = 0; j < columns; j++) {\n      for (i = 0; i < rows; i++) {\n        LUcolj[i] = lu.get(i, j);\n      }\n\n      for (i = 0; i < rows; i++) {\n        kmax = Math.min(i, j);\n        s = 0;\n        for (k = 0; k < kmax; k++) {\n          s += lu.get(i, k) * LUcolj[k];\n        }\n        LUcolj[i] -= s;\n        lu.set(i, j, LUcolj[i]);\n      }\n\n      p = j;\n      for (i = j + 1; i < rows; i++) {\n        if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n          p = i;\n        }\n      }\n\n      if (p !== j) {\n        for (k = 0; k < columns; k++) {\n          t = lu.get(p, k);\n          lu.set(p, k, lu.get(j, k));\n          lu.set(j, k, t);\n        }\n\n        v = pivotVector[p];\n        pivotVector[p] = pivotVector[j];\n        pivotVector[j] = v;\n\n        pivotSign = -pivotSign;\n      }\n\n      if (j < rows && lu.get(j, j) !== 0) {\n        for (i = j + 1; i < rows; i++) {\n          lu.set(i, j, lu.get(i, j) / lu.get(j, j));\n        }\n      }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n  }\n\n  isSingular() {\n    let data = this.LU;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      if (data.get(j, j) === 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let lu = this.LU;\n    let rows = lu.rows;\n\n    if (rows !== value.rows) {\n      throw new Error('Invalid matrix dimensions');\n    }\n    if (this.isSingular()) {\n      throw new Error('LU matrix is singular');\n    }\n\n    let count = value.columns;\n    let X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n    let columns = lu.columns;\n    let i, j, k;\n\n    for (k = 0; k < columns; k++) {\n      for (i = k + 1; i < columns; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    for (k = columns - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / lu.get(k, k));\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    return X;\n  }\n\n  get determinant() {\n    let data = this.LU;\n    if (!data.isSquare()) {\n      throw new Error('Matrix must be square');\n    }\n    let determinant = this.pivotSign;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      determinant *= data.get(j, j);\n    }\n    return determinant;\n  }\n\n  get lowerTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i > j) {\n          X.set(i, j, data.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, 1);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get upperTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i <= j) {\n          X.set(i, j, data.get(i, j));\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get pivotPermutationVector() {\n    return Array.from(this.pivotVector);\n  }\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nexport default class nipals {\n  constructor(X, options = {}) {\n    X = WrapperMatrix2D.checkMatrix(X);\n    let { Y } = options;\n    const {\n      scaleScores = false,\n      maxIterations = 1000,\n      terminationCriteria = 1e-10,\n    } = options;\n\n    let u;\n    if (Y) {\n      if (Array.isArray(Y) && typeof Y[0] === 'number') {\n        Y = Matrix.columnVector(Y);\n      } else {\n        Y = WrapperMatrix2D.checkMatrix(Y);\n      }\n      if (Y.rows !== X.rows) {\n        throw new Error('Y should have the same number of rows as X');\n      }\n      u = Y.getColumnVector(0);\n    } else {\n      u = X.getColumnVector(0);\n    }\n\n    let diff = 1;\n    let t, q, w, tOld;\n\n    for (\n      let counter = 0;\n      counter < maxIterations && diff > terminationCriteria;\n      counter++\n    ) {\n      w = X.transpose().mmul(u).div(u.transpose().mmul(u).get(0, 0));\n      w = w.div(w.norm());\n\n      t = X.mmul(w).div(w.transpose().mmul(w).get(0, 0));\n\n      if (counter > 0) {\n        diff = t.clone().sub(tOld).pow(2).sum();\n      }\n      tOld = t.clone();\n\n      if (Y) {\n        q = Y.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));\n        q = q.div(q.norm());\n\n        u = Y.mmul(q).div(q.transpose().mmul(q).get(0, 0));\n      } else {\n        u = t;\n      }\n    }\n\n    if (Y) {\n      let p = X.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));\n      p = p.div(p.norm());\n      let xResidual = X.clone().sub(t.clone().mmul(p.transpose()));\n      let residual = u.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));\n      let yResidual = Y.clone().sub(\n        t.clone().mulS(residual.get(0, 0)).mmul(q.transpose()),\n      );\n\n      this.t = t;\n      this.p = p.transpose();\n      this.w = w.transpose();\n      this.q = q;\n      this.u = u;\n      this.s = t.transpose().mmul(t);\n      this.xResidual = xResidual;\n      this.yResidual = yResidual;\n      this.betas = residual;\n    } else {\n      this.w = w.transpose();\n      this.s = t.transpose().mmul(t).sqrt();\n      if (scaleScores) {\n        this.t = t.clone().div(this.s.get(0, 0));\n      } else {\n        this.t = t;\n      }\n      this.xResidual = X.sub(t.mmul(w.transpose()));\n    }\n  }\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nimport { hypotenuse } from './util';\n\nexport default class QrDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let qr = value.clone();\n    let m = value.rows;\n    let n = value.columns;\n    let rdiag = new Float64Array(n);\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      let nrm = 0;\n      for (i = k; i < m; i++) {\n        nrm = hypotenuse(nrm, qr.get(i, k));\n      }\n      if (nrm !== 0) {\n        if (qr.get(k, k) < 0) {\n          nrm = -nrm;\n        }\n        for (i = k; i < m; i++) {\n          qr.set(i, k, qr.get(i, k) / nrm);\n        }\n        qr.set(k, k, qr.get(k, k) + 1);\n        for (j = k + 1; j < n; j++) {\n          s = 0;\n          for (i = k; i < m; i++) {\n            s += qr.get(i, k) * qr.get(i, j);\n          }\n          s = -s / qr.get(k, k);\n          for (i = k; i < m; i++) {\n            qr.set(i, j, qr.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n      rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let qr = this.QR;\n    let m = qr.rows;\n\n    if (value.rows !== m) {\n      throw new Error('Matrix row dimensions must agree');\n    }\n    if (!this.isFullRank()) {\n      throw new Error('Matrix is rank deficient');\n    }\n\n    let count = value.columns;\n    let X = value.clone();\n    let n = qr.columns;\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      for (j = 0; j < count; j++) {\n        s = 0;\n        for (i = k; i < m; i++) {\n          s += qr.get(i, k) * X.get(i, j);\n        }\n        s = -s / qr.get(k, k);\n        for (i = k; i < m; i++) {\n          X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n        }\n      }\n    }\n    for (k = n - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / this.Rdiag[k]);\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * qr.get(i, k));\n        }\n      }\n    }\n\n    return X.subMatrix(0, n - 1, 0, count - 1);\n  }\n\n  isFullRank() {\n    let columns = this.QR.columns;\n    for (let i = 0; i < columns; i++) {\n      if (this.Rdiag[i] === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  get upperTriangularMatrix() {\n    let qr = this.QR;\n    let n = qr.columns;\n    let X = new Matrix(n, n);\n    let i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        if (i < j) {\n          X.set(i, j, qr.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, this.Rdiag[i]);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get orthogonalMatrix() {\n    let qr = this.QR;\n    let rows = qr.rows;\n    let columns = qr.columns;\n    let X = new Matrix(rows, columns);\n    let i, j, k, s;\n\n    for (k = columns - 1; k >= 0; k--) {\n      for (i = 0; i < rows; i++) {\n        X.set(i, k, 0);\n      }\n      X.set(k, k, 1);\n      for (j = k; j < columns; j++) {\n        if (qr.get(k, k) !== 0) {\n          s = 0;\n          for (i = k; i < rows; i++) {\n            s += qr.get(i, k) * X.get(i, j);\n          }\n\n          s = -s / qr.get(k, k);\n\n          for (i = k; i < rows; i++) {\n            X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n    }\n    return X;\n  }\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nimport { hypotenuse } from './util';\n\nexport default class SingularValueDecomposition {\n  constructor(value, options = {}) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    if (value.isEmpty()) {\n      throw new Error('Matrix must be non-empty');\n    }\n\n    let m = value.rows;\n    let n = value.columns;\n\n    const {\n      computeLeftSingularVectors = true,\n      computeRightSingularVectors = true,\n      autoTranspose = false,\n    } = options;\n\n    let wantu = Boolean(computeLeftSingularVectors);\n    let wantv = Boolean(computeRightSingularVectors);\n\n    let swapped = false;\n    let a;\n    if (m < n) {\n      if (!autoTranspose) {\n        a = value.clone();\n        // eslint-disable-next-line no-console\n        console.warn(\n          'Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose',\n        );\n      } else {\n        a = value.transpose();\n        m = a.rows;\n        n = a.columns;\n        swapped = true;\n        let aux = wantu;\n        wantu = wantv;\n        wantv = aux;\n      }\n    } else {\n      a = value.clone();\n    }\n\n    let nu = Math.min(m, n);\n    let ni = Math.min(m + 1, n);\n    let s = new Float64Array(ni);\n    let U = new Matrix(m, nu);\n    let V = new Matrix(n, n);\n\n    let e = new Float64Array(n);\n    let work = new Float64Array(m);\n\n    let si = new Float64Array(ni);\n    for (let i = 0; i < ni; i++) si[i] = i;\n\n    let nct = Math.min(m - 1, n);\n    let nrt = Math.max(0, Math.min(n - 2, m));\n    let mrc = Math.max(nct, nrt);\n\n    for (let k = 0; k < mrc; k++) {\n      if (k < nct) {\n        s[k] = 0;\n        for (let i = k; i < m; i++) {\n          s[k] = hypotenuse(s[k], a.get(i, k));\n        }\n        if (s[k] !== 0) {\n          if (a.get(k, k) < 0) {\n            s[k] = -s[k];\n          }\n          for (let i = k; i < m; i++) {\n            a.set(i, k, a.get(i, k) / s[k]);\n          }\n          a.set(k, k, a.get(k, k) + 1);\n        }\n        s[k] = -s[k];\n      }\n\n      for (let j = k + 1; j < n; j++) {\n        if (k < nct && s[k] !== 0) {\n          let t = 0;\n          for (let i = k; i < m; i++) {\n            t += a.get(i, k) * a.get(i, j);\n          }\n          t = -t / a.get(k, k);\n          for (let i = k; i < m; i++) {\n            a.set(i, j, a.get(i, j) + t * a.get(i, k));\n          }\n        }\n        e[j] = a.get(k, j);\n      }\n\n      if (wantu && k < nct) {\n        for (let i = k; i < m; i++) {\n          U.set(i, k, a.get(i, k));\n        }\n      }\n\n      if (k < nrt) {\n        e[k] = 0;\n        for (let i = k + 1; i < n; i++) {\n          e[k] = hypotenuse(e[k], e[i]);\n        }\n        if (e[k] !== 0) {\n          if (e[k + 1] < 0) {\n            e[k] = 0 - e[k];\n          }\n          for (let i = k + 1; i < n; i++) {\n            e[i] /= e[k];\n          }\n          e[k + 1] += 1;\n        }\n        e[k] = -e[k];\n        if (k + 1 < m && e[k] !== 0) {\n          for (let i = k + 1; i < m; i++) {\n            work[i] = 0;\n          }\n          for (let i = k + 1; i < m; i++) {\n            for (let j = k + 1; j < n; j++) {\n              work[i] += e[j] * a.get(i, j);\n            }\n          }\n          for (let j = k + 1; j < n; j++) {\n            let t = -e[j] / e[k + 1];\n            for (let i = k + 1; i < m; i++) {\n              a.set(i, j, a.get(i, j) + t * work[i]);\n            }\n          }\n        }\n        if (wantv) {\n          for (let i = k + 1; i < n; i++) {\n            V.set(i, k, e[i]);\n          }\n        }\n      }\n    }\n\n    let p = Math.min(n, m + 1);\n    if (nct < n) {\n      s[nct] = a.get(nct, nct);\n    }\n    if (m < p) {\n      s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n      e[nrt] = a.get(nrt, p - 1);\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n      for (let j = nct; j < nu; j++) {\n        for (let i = 0; i < m; i++) {\n          U.set(i, j, 0);\n        }\n        U.set(j, j, 1);\n      }\n      for (let k = nct - 1; k >= 0; k--) {\n        if (s[k] !== 0) {\n          for (let j = k + 1; j < nu; j++) {\n            let t = 0;\n            for (let i = k; i < m; i++) {\n              t += U.get(i, k) * U.get(i, j);\n            }\n            t = -t / U.get(k, k);\n            for (let i = k; i < m; i++) {\n              U.set(i, j, U.get(i, j) + t * U.get(i, k));\n            }\n          }\n          for (let i = k; i < m; i++) {\n            U.set(i, k, -U.get(i, k));\n          }\n          U.set(k, k, 1 + U.get(k, k));\n          for (let i = 0; i < k - 1; i++) {\n            U.set(i, k, 0);\n          }\n        } else {\n          for (let i = 0; i < m; i++) {\n            U.set(i, k, 0);\n          }\n          U.set(k, k, 1);\n        }\n      }\n    }\n\n    if (wantv) {\n      for (let k = n - 1; k >= 0; k--) {\n        if (k < nrt && e[k] !== 0) {\n          for (let j = k + 1; j < n; j++) {\n            let t = 0;\n            for (let i = k + 1; i < n; i++) {\n              t += V.get(i, k) * V.get(i, j);\n            }\n            t = -t / V.get(k + 1, k);\n            for (let i = k + 1; i < n; i++) {\n              V.set(i, j, V.get(i, j) + t * V.get(i, k));\n            }\n          }\n        }\n        for (let i = 0; i < n; i++) {\n          V.set(i, k, 0);\n        }\n        V.set(k, k, 1);\n      }\n    }\n\n    let pp = p - 1;\n    let iter = 0;\n    let eps = Number.EPSILON;\n    while (p > 0) {\n      let k, kase;\n      for (k = p - 2; k >= -1; k--) {\n        if (k === -1) {\n          break;\n        }\n        const alpha =\n          Number.MIN_VALUE + eps * Math.abs(s[k] + Math.abs(s[k + 1]));\n        if (Math.abs(e[k]) <= alpha || Number.isNaN(e[k])) {\n          e[k] = 0;\n          break;\n        }\n      }\n      if (k === p - 2) {\n        kase = 4;\n      } else {\n        let ks;\n        for (ks = p - 1; ks >= k; ks--) {\n          if (ks === k) {\n            break;\n          }\n          let t =\n            (ks !== p ? Math.abs(e[ks]) : 0) +\n            (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n          if (Math.abs(s[ks]) <= eps * t) {\n            s[ks] = 0;\n            break;\n          }\n        }\n        if (ks === k) {\n          kase = 3;\n        } else if (ks === p - 1) {\n          kase = 1;\n        } else {\n          kase = 2;\n          k = ks;\n        }\n      }\n\n      k++;\n\n      switch (kase) {\n        case 1: {\n          let f = e[p - 2];\n          e[p - 2] = 0;\n          for (let j = p - 2; j >= k; j--) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            if (j !== k) {\n              f = -sn * e[j - 1];\n              e[j - 1] = cs * e[j - 1];\n            }\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V.get(i, j) + sn * V.get(i, p - 1);\n                V.set(i, p - 1, -sn * V.get(i, j) + cs * V.get(i, p - 1));\n                V.set(i, j, t);\n              }\n            }\n          }\n          break;\n        }\n        case 2: {\n          let f = e[k - 1];\n          e[k - 1] = 0;\n          for (let j = k; j < p; j++) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            f = -sn * e[j];\n            e[j] = cs * e[j];\n            if (wantu) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U.get(i, j) + sn * U.get(i, k - 1);\n                U.set(i, k - 1, -sn * U.get(i, j) + cs * U.get(i, k - 1));\n                U.set(i, j, t);\n              }\n            }\n          }\n          break;\n        }\n        case 3: {\n          const scale = Math.max(\n            Math.abs(s[p - 1]),\n            Math.abs(s[p - 2]),\n            Math.abs(e[p - 2]),\n            Math.abs(s[k]),\n            Math.abs(e[k]),\n          );\n          const sp = s[p - 1] / scale;\n          const spm1 = s[p - 2] / scale;\n          const epm1 = e[p - 2] / scale;\n          const sk = s[k] / scale;\n          const ek = e[k] / scale;\n          const b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n          const c = sp * epm1 * (sp * epm1);\n          let shift = 0;\n          if (b !== 0 || c !== 0) {\n            if (b < 0) {\n              shift = 0 - Math.sqrt(b * b + c);\n            } else {\n              shift = Math.sqrt(b * b + c);\n            }\n            shift = c / (b + shift);\n          }\n          let f = (sk + sp) * (sk - sp) + shift;\n          let g = sk * ek;\n          for (let j = k; j < p - 1; j++) {\n            let t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            let cs = f / t;\n            let sn = g / t;\n            if (j !== k) {\n              e[j - 1] = t;\n            }\n            f = cs * s[j] + sn * e[j];\n            e[j] = cs * e[j] - sn * s[j];\n            g = sn * s[j + 1];\n            s[j + 1] = cs * s[j + 1];\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V.get(i, j) + sn * V.get(i, j + 1);\n                V.set(i, j + 1, -sn * V.get(i, j) + cs * V.get(i, j + 1));\n                V.set(i, j, t);\n              }\n            }\n            t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            cs = f / t;\n            sn = g / t;\n            s[j] = t;\n            f = cs * e[j] + sn * s[j + 1];\n            s[j + 1] = -sn * e[j] + cs * s[j + 1];\n            g = sn * e[j + 1];\n            e[j + 1] = cs * e[j + 1];\n            if (wantu && j < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U.get(i, j) + sn * U.get(i, j + 1);\n                U.set(i, j + 1, -sn * U.get(i, j) + cs * U.get(i, j + 1));\n                U.set(i, j, t);\n              }\n            }\n          }\n          e[p - 2] = f;\n          iter = iter + 1;\n          break;\n        }\n        case 4: {\n          if (s[k] <= 0) {\n            s[k] = s[k] < 0 ? -s[k] : 0;\n            if (wantv) {\n              for (let i = 0; i <= pp; i++) {\n                V.set(i, k, -V.get(i, k));\n              }\n            }\n          }\n          while (k < pp) {\n            if (s[k] >= s[k + 1]) {\n              break;\n            }\n            let t = s[k];\n            s[k] = s[k + 1];\n            s[k + 1] = t;\n            if (wantv && k < n - 1) {\n              for (let i = 0; i < n; i++) {\n                t = V.get(i, k + 1);\n                V.set(i, k + 1, V.get(i, k));\n                V.set(i, k, t);\n              }\n            }\n            if (wantu && k < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = U.get(i, k + 1);\n                U.set(i, k + 1, U.get(i, k));\n                U.set(i, k, t);\n              }\n            }\n            k++;\n          }\n          iter = 0;\n          p--;\n          break;\n        }\n        // no default\n      }\n    }\n\n    if (swapped) {\n      let tmp = V;\n      V = U;\n      U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n  }\n\n  solve(value) {\n    let Y = value;\n    let e = this.threshold;\n    let scols = this.s.length;\n    let Ls = Matrix.zeros(scols, scols);\n\n    for (let i = 0; i < scols; i++) {\n      if (Math.abs(this.s[i]) <= e) {\n        Ls.set(i, i, 0);\n      } else {\n        Ls.set(i, i, 1 / this.s[i]);\n      }\n    }\n\n    let U = this.U;\n    let V = this.rightSingularVectors;\n\n    let VL = V.mmul(Ls);\n    let vrows = V.rows;\n    let urows = U.rows;\n    let VLU = Matrix.zeros(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < scols; k++) {\n          sum += VL.get(i, k) * U.get(j, k);\n        }\n        VLU.set(i, j, sum);\n      }\n    }\n\n    return VLU.mmul(Y);\n  }\n\n  solveForDiagonal(value) {\n    return this.solve(Matrix.diag(value));\n  }\n\n  inverse() {\n    let V = this.V;\n    let e = this.threshold;\n    let vrows = V.rows;\n    let vcols = V.columns;\n    let X = new Matrix(vrows, this.s.length);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < vcols; j++) {\n        if (Math.abs(this.s[j]) > e) {\n          X.set(i, j, V.get(i, j) / this.s[j]);\n        }\n      }\n    }\n\n    let U = this.U;\n\n    let urows = U.rows;\n    let ucols = U.columns;\n    let Y = new Matrix(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < ucols; k++) {\n          sum += X.get(i, k) * U.get(j, k);\n        }\n        Y.set(i, j, sum);\n      }\n    }\n\n    return Y;\n  }\n\n  get condition() {\n    return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n  }\n\n  get norm2() {\n    return this.s[0];\n  }\n\n  get rank() {\n    let tol = Math.max(this.m, this.n) * this.s[0] * Number.EPSILON;\n    let r = 0;\n    let s = this.s;\n    for (let i = 0, ii = s.length; i < ii; i++) {\n      if (s[i] > tol) {\n        r++;\n      }\n    }\n    return r;\n  }\n\n  get diagonal() {\n    return Array.from(this.s);\n  }\n\n  get threshold() {\n    return (Number.EPSILON / 2) * Math.max(this.m, this.n) * this.s[0];\n  }\n\n  get leftSingularVectors() {\n    return this.U;\n  }\n\n  get rightSingularVectors() {\n    return this.V;\n  }\n\n  get diagonalMatrix() {\n    return Matrix.diag(this.s);\n  }\n}\n","export function hypotenuse(a, b) {\n  let r = 0;\n  if (Math.abs(a) > Math.abs(b)) {\n    r = b / a;\n    return Math.abs(a) * Math.sqrt(1 + r * r);\n  }\n  if (b !== 0) {\n    r = a / b;\n    return Math.abs(b) * Math.sqrt(1 + r * r);\n  }\n  return 0;\n}\n","import LuDecomposition from './dc/lu';\nimport QrDecomposition from './dc/qr';\nimport SingularValueDecomposition from './dc/svd';\nimport Matrix from './matrix';\nimport WrapperMatrix2D from './wrap/WrapperMatrix2D';\n\nexport function inverse(matrix, useSVD = false) {\n  matrix = WrapperMatrix2D.checkMatrix(matrix);\n  if (useSVD) {\n    return new SingularValueDecomposition(matrix).inverse();\n  } else {\n    return solve(matrix, Matrix.eye(matrix.rows));\n  }\n}\n\nexport function solve(leftHandSide, rightHandSide, useSVD = false) {\n  leftHandSide = WrapperMatrix2D.checkMatrix(leftHandSide);\n  rightHandSide = WrapperMatrix2D.checkMatrix(rightHandSide);\n  if (useSVD) {\n    return new SingularValueDecomposition(leftHandSide).solve(rightHandSide);\n  } else {\n    return leftHandSide.isSquare()\n      ? new LuDecomposition(leftHandSide).solve(rightHandSide)\n      : new QrDecomposition(leftHandSide).solve(rightHandSide);\n  }\n}\n","import LuDecomposition from './dc/lu';\nimport Matrix from './matrix';\nimport MatrixSelectionView from './views/selection';\n\nexport function determinant(matrix) {\n  matrix = Matrix.checkMatrix(matrix);\n  if (matrix.isSquare()) {\n    if (matrix.columns === 0) {\n      return 1;\n    }\n\n    let a, b, c, d;\n    if (matrix.columns === 2) {\n      // 2 x 2 matrix\n      a = matrix.get(0, 0);\n      b = matrix.get(0, 1);\n      c = matrix.get(1, 0);\n      d = matrix.get(1, 1);\n\n      return a * d - b * c;\n    } else if (matrix.columns === 3) {\n      // 3 x 3 matrix\n      let subMatrix0, subMatrix1, subMatrix2;\n      subMatrix0 = new MatrixSelectionView(matrix, [1, 2], [1, 2]);\n      subMatrix1 = new MatrixSelectionView(matrix, [1, 2], [0, 2]);\n      subMatrix2 = new MatrixSelectionView(matrix, [1, 2], [0, 1]);\n      a = matrix.get(0, 0);\n      b = matrix.get(0, 1);\n      c = matrix.get(0, 2);\n\n      return (\n        a * determinant(subMatrix0) -\n        b * determinant(subMatrix1) +\n        c * determinant(subMatrix2)\n      );\n    } else {\n      // general purpose determinant using the LU decomposition\n      return new LuDecomposition(matrix).determinant;\n    }\n  } else {\n    throw Error('determinant can only be calculated for a square matrix');\n  }\n}\n","export { AbstractMatrix, default, default as Matrix } from './matrix';\nexport * from './views/index';\n\nexport { wrap } from './wrap/wrap';\nexport { default as WrapperMatrix1D } from './wrap/WrapperMatrix1D';\nexport { default as WrapperMatrix2D } from './wrap/WrapperMatrix2D';\n\nexport { solve, inverse } from './decompositions';\nexport { determinant } from './determinant';\nexport { linearDependencies } from './linearDependencies';\nexport { pseudoInverse } from './pseudoInverse';\nexport { covariance } from './covariance';\nexport { correlation } from './correlation';\n\nexport {\n  default as SingularValueDecomposition,\n  default as SVD,\n} from './dc/svd.js';\nexport {\n  default as EigenvalueDecomposition,\n  default as EVD,\n} from './dc/evd.js';\nexport {\n  default as CholeskyDecomposition,\n  default as CHO,\n} from './dc/cholesky.js';\nexport { default as LuDecomposition, default as LU } from './dc/lu.js';\nexport { default as QrDecomposition, default as QR } from './dc/qr.js';\nexport { default as Nipals, default as NIPALS } from './dc/nipals.js';\n","const indent = ' '.repeat(2);\nconst indentData = ' '.repeat(4);\n\nexport function inspectMatrix() {\n  return inspectMatrixWithOptions(this);\n}\n\nexport function inspectMatrixWithOptions(matrix, options = {}) {\n  const { maxRows = 15, maxColumns = 10, maxNumSize = 8 } = options;\n  return `${matrix.constructor.name} {\n${indent}[\n${indentData}${inspectData(matrix, maxRows, maxColumns, maxNumSize)}\n${indent}]\n${indent}rows: ${matrix.rows}\n${indent}columns: ${matrix.columns}\n}`;\n}\n\nfunction inspectData(matrix, maxRows, maxColumns, maxNumSize) {\n  const { rows, columns } = matrix;\n  const maxI = Math.min(rows, maxRows);\n  const maxJ = Math.min(columns, maxColumns);\n  const result = [];\n  for (let i = 0; i < maxI; i++) {\n    let line = [];\n    for (let j = 0; j < maxJ; j++) {\n      line.push(formatNumber(matrix.get(i, j), maxNumSize));\n    }\n    result.push(`${line.join(' ')}`);\n  }\n  if (maxJ !== columns) {\n    result[result.length - 1] += ` ... ${columns - maxColumns} more columns`;\n  }\n  if (maxI !== rows) {\n    result.push(`... ${rows - maxRows} more rows`);\n  }\n  return result.join(`\\n${indentData}`);\n}\n\nfunction formatNumber(num, maxNumSize) {\n  const numStr = String(num);\n  if (numStr.length <= maxNumSize) {\n    return numStr.padEnd(maxNumSize, ' ');\n  }\n  const precise = num.toPrecision(maxNumSize - 2);\n  if (precise.length <= maxNumSize) {\n    return precise;\n  }\n  const exponential = num.toExponential(maxNumSize - 2);\n  const eIndex = exponential.indexOf('e');\n  const e = exponential.slice(eIndex);\n  return exponential.slice(0, maxNumSize - e.length) + e;\n}\n","import SingularValueDecomposition from './dc/svd';\nimport Matrix from './matrix';\n\nfunction xrange(n, exception) {\n  let range = [];\n  for (let i = 0; i < n; i++) {\n    if (i !== exception) {\n      range.push(i);\n    }\n  }\n  return range;\n}\n\nfunction dependenciesOneRow(\n  error,\n  matrix,\n  index,\n  thresholdValue = 10e-10,\n  thresholdError = 10e-10,\n) {\n  if (error > thresholdError) {\n    return new Array(matrix.rows + 1).fill(0);\n  } else {\n    let returnArray = matrix.addRow(index, [0]);\n    for (let i = 0; i < returnArray.rows; i++) {\n      if (Math.abs(returnArray.get(i, 0)) < thresholdValue) {\n        returnArray.set(i, 0, 0);\n      }\n    }\n    return returnArray.to1DArray();\n  }\n}\n\nexport function linearDependencies(matrix, options = {}) {\n  const { thresholdValue = 10e-10, thresholdError = 10e-10 } = options;\n  matrix = Matrix.checkMatrix(matrix);\n\n  let n = matrix.rows;\n  let results = new Matrix(n, n);\n\n  for (let i = 0; i < n; i++) {\n    let b = Matrix.columnVector(matrix.getRow(i));\n    let Abis = matrix.subMatrixRow(xrange(n, i)).transpose();\n    let svd = new SingularValueDecomposition(Abis);\n    let x = svd.solve(b);\n    let error = Matrix.sub(b, Abis.mmul(x)).abs().max();\n    results.setRow(\n      i,\n      dependenciesOneRow(error, x, i, thresholdValue, thresholdError),\n    );\n  }\n  return results;\n}\n","export function installMathOperations(AbstractMatrix, Matrix) {\n  AbstractMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number') return this.addS(value);\n    return this.addM(value);\n  };\n\n  AbstractMatrix.prototype.addS = function addS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.addM = function addM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.add = function add(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.add(value);\n  };\n\n  AbstractMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number') return this.subS(value);\n    return this.subM(value);\n  };\n\n  AbstractMatrix.prototype.subS = function subS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.subM = function subM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sub = function sub(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sub(value);\n  };\n  AbstractMatrix.prototype.subtract = AbstractMatrix.prototype.sub;\n  AbstractMatrix.prototype.subtractS = AbstractMatrix.prototype.subS;\n  AbstractMatrix.prototype.subtractM = AbstractMatrix.prototype.subM;\n  AbstractMatrix.subtract = AbstractMatrix.sub;\n\n  AbstractMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number') return this.mulS(value);\n    return this.mulM(value);\n  };\n\n  AbstractMatrix.prototype.mulS = function mulS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.mulM = function mulM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mul = function mul(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mul(value);\n  };\n  AbstractMatrix.prototype.multiply = AbstractMatrix.prototype.mul;\n  AbstractMatrix.prototype.multiplyS = AbstractMatrix.prototype.mulS;\n  AbstractMatrix.prototype.multiplyM = AbstractMatrix.prototype.mulM;\n  AbstractMatrix.multiply = AbstractMatrix.mul;\n\n  AbstractMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number') return this.divS(value);\n    return this.divM(value);\n  };\n\n  AbstractMatrix.prototype.divS = function divS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.divM = function divM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.div = function div(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.div(value);\n  };\n  AbstractMatrix.prototype.divide = AbstractMatrix.prototype.div;\n  AbstractMatrix.prototype.divideS = AbstractMatrix.prototype.divS;\n  AbstractMatrix.prototype.divideM = AbstractMatrix.prototype.divM;\n  AbstractMatrix.divide = AbstractMatrix.div;\n\n  AbstractMatrix.prototype.mod = function mod(value) {\n    if (typeof value === 'number') return this.modS(value);\n    return this.modM(value);\n  };\n\n  AbstractMatrix.prototype.modS = function modS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.modM = function modM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mod = function mod(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mod(value);\n  };\n  AbstractMatrix.prototype.modulus = AbstractMatrix.prototype.mod;\n  AbstractMatrix.prototype.modulusS = AbstractMatrix.prototype.modS;\n  AbstractMatrix.prototype.modulusM = AbstractMatrix.prototype.modM;\n  AbstractMatrix.modulus = AbstractMatrix.mod;\n\n  AbstractMatrix.prototype.and = function and(value) {\n    if (typeof value === 'number') return this.andS(value);\n    return this.andM(value);\n  };\n\n  AbstractMatrix.prototype.andS = function andS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.andM = function andM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.and = function and(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.and(value);\n  };\n\n  AbstractMatrix.prototype.or = function or(value) {\n    if (typeof value === 'number') return this.orS(value);\n    return this.orM(value);\n  };\n\n  AbstractMatrix.prototype.orS = function orS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.orM = function orM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.or = function or(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.or(value);\n  };\n\n  AbstractMatrix.prototype.xor = function xor(value) {\n    if (typeof value === 'number') return this.xorS(value);\n    return this.xorM(value);\n  };\n\n  AbstractMatrix.prototype.xorS = function xorS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.xorM = function xorM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.xor = function xor(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.xor(value);\n  };\n\n  AbstractMatrix.prototype.leftShift = function leftShift(value) {\n    if (typeof value === 'number') return this.leftShiftS(value);\n    return this.leftShiftM(value);\n  };\n\n  AbstractMatrix.prototype.leftShiftS = function leftShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.leftShiftM = function leftShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.leftShift = function leftShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.leftShift(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShift = function signPropagatingRightShift(value) {\n    if (typeof value === 'number') return this.signPropagatingRightShiftS(value);\n    return this.signPropagatingRightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftS = function signPropagatingRightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftM = function signPropagatingRightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.signPropagatingRightShift = function signPropagatingRightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.signPropagatingRightShift(value);\n  };\n\n  AbstractMatrix.prototype.rightShift = function rightShift(value) {\n    if (typeof value === 'number') return this.rightShiftS(value);\n    return this.rightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.rightShiftS = function rightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.rightShiftM = function rightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.rightShift = function rightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.rightShift(value);\n  };\n  AbstractMatrix.prototype.zeroFillRightShift = AbstractMatrix.prototype.rightShift;\n  AbstractMatrix.prototype.zeroFillRightShiftS = AbstractMatrix.prototype.rightShiftS;\n  AbstractMatrix.prototype.zeroFillRightShiftM = AbstractMatrix.prototype.rightShiftM;\n  AbstractMatrix.zeroFillRightShift = AbstractMatrix.rightShift;\n\n  AbstractMatrix.prototype.not = function not() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, ~(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.not = function not(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.not();\n  };\n\n  AbstractMatrix.prototype.abs = function abs() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.abs(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.abs = function abs(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.abs();\n  };\n\n  AbstractMatrix.prototype.acos = function acos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acos = function acos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acos();\n  };\n\n  AbstractMatrix.prototype.acosh = function acosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acosh = function acosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acosh();\n  };\n\n  AbstractMatrix.prototype.asin = function asin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asin = function asin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asin();\n  };\n\n  AbstractMatrix.prototype.asinh = function asinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asinh = function asinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asinh();\n  };\n\n  AbstractMatrix.prototype.atan = function atan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atan = function atan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atan();\n  };\n\n  AbstractMatrix.prototype.atanh = function atanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atanh = function atanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atanh();\n  };\n\n  AbstractMatrix.prototype.cbrt = function cbrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cbrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cbrt = function cbrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cbrt();\n  };\n\n  AbstractMatrix.prototype.ceil = function ceil() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.ceil(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.ceil = function ceil(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.ceil();\n  };\n\n  AbstractMatrix.prototype.clz32 = function clz32() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.clz32(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.clz32 = function clz32(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.clz32();\n  };\n\n  AbstractMatrix.prototype.cos = function cos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cos = function cos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cos();\n  };\n\n  AbstractMatrix.prototype.cosh = function cosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cosh = function cosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cosh();\n  };\n\n  AbstractMatrix.prototype.exp = function exp() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.exp(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.exp = function exp(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.exp();\n  };\n\n  AbstractMatrix.prototype.expm1 = function expm1() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.expm1(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.expm1 = function expm1(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.expm1();\n  };\n\n  AbstractMatrix.prototype.floor = function floor() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.floor(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.floor = function floor(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.floor();\n  };\n\n  AbstractMatrix.prototype.fround = function fround() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.fround(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.fround = function fround(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.fround();\n  };\n\n  AbstractMatrix.prototype.log = function log() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log = function log(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log();\n  };\n\n  AbstractMatrix.prototype.log1p = function log1p() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log1p(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log1p = function log1p(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log1p();\n  };\n\n  AbstractMatrix.prototype.log10 = function log10() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log10(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log10 = function log10(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log10();\n  };\n\n  AbstractMatrix.prototype.log2 = function log2() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log2(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log2 = function log2(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log2();\n  };\n\n  AbstractMatrix.prototype.round = function round() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.round(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.round = function round(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.round();\n  };\n\n  AbstractMatrix.prototype.sign = function sign() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sign(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sign = function sign(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sign();\n  };\n\n  AbstractMatrix.prototype.sin = function sin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sin = function sin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sin();\n  };\n\n  AbstractMatrix.prototype.sinh = function sinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sinh = function sinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sinh();\n  };\n\n  AbstractMatrix.prototype.sqrt = function sqrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sqrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sqrt = function sqrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sqrt();\n  };\n\n  AbstractMatrix.prototype.tan = function tan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tan = function tan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tan();\n  };\n\n  AbstractMatrix.prototype.tanh = function tanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tanh = function tanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tanh();\n  };\n\n  AbstractMatrix.prototype.trunc = function trunc() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.trunc(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.trunc = function trunc(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.trunc();\n  };\n\n  AbstractMatrix.pow = function pow(matrix, arg0) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.pow(arg0);\n  };\n\n  AbstractMatrix.prototype.pow = function pow(value) {\n    if (typeof value === 'number') return this.powS(value);\n    return this.powM(value);\n  };\n\n  AbstractMatrix.prototype.powS = function powS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), value));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.powM = function powM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), matrix.get(i, j)));\n      }\n    }\n    return this;\n  };\n}\n","import rescale from 'ml-array-rescale';\n\nimport { inspectMatrix, inspectMatrixWithOptions } from './inspect';\nimport { installMathOperations } from './mathOperations';\nimport {\n  sumByRow,\n  sumByColumn,\n  sumAll,\n  productByRow,\n  productByColumn,\n  productAll,\n  varianceByRow,\n  varianceByColumn,\n  varianceAll,\n  centerByRow,\n  centerByColumn,\n  centerAll,\n  scaleByRow,\n  scaleByColumn,\n  scaleAll,\n  getScaleByRow,\n  getScaleByColumn,\n  getScaleAll,\n} from './stat';\nimport {\n  checkRowVector,\n  checkRowIndex,\n  checkColumnIndex,\n  checkColumnVector,\n  checkRange,\n  checkIndices,\n  checkNonEmpty,\n} from './util';\n\nexport class AbstractMatrix {\n  static from1DArray(newRows, newColumns, newData) {\n    let length = newRows * newColumns;\n    if (length !== newData.length) {\n      throw new RangeError('data length does not match given dimensions');\n    }\n    let newMatrix = new Matrix(newRows, newColumns);\n    for (let row = 0; row < newRows; row++) {\n      for (let column = 0; column < newColumns; column++) {\n        newMatrix.set(row, column, newData[row * newColumns + column]);\n      }\n    }\n    return newMatrix;\n  }\n\n  static rowVector(newData) {\n    let vector = new Matrix(1, newData.length);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(0, i, newData[i]);\n    }\n    return vector;\n  }\n\n  static columnVector(newData) {\n    let vector = new Matrix(newData.length, 1);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(i, 0, newData[i]);\n    }\n    return vector;\n  }\n\n  static zeros(rows, columns) {\n    return new Matrix(rows, columns);\n  }\n\n  static ones(rows, columns) {\n    return new Matrix(rows, columns).fill(1);\n  }\n\n  static rand(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { random = Math.random } = options;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.set(i, j, random());\n      }\n    }\n    return matrix;\n  }\n\n  static randInt(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1000, random = Math.random } = options;\n    if (!Number.isInteger(min)) throw new TypeError('min must be an integer');\n    if (!Number.isInteger(max)) throw new TypeError('max must be an integer');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let interval = max - min;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let value = min + Math.round(random() * interval);\n        matrix.set(i, j, value);\n      }\n    }\n    return matrix;\n  }\n\n  static eye(rows, columns, value) {\n    if (columns === undefined) columns = rows;\n    if (value === undefined) value = 1;\n    let min = Math.min(rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, value);\n    }\n    return matrix;\n  }\n\n  static diag(data, rows, columns) {\n    let l = data.length;\n    if (rows === undefined) rows = l;\n    if (columns === undefined) columns = rows;\n    let min = Math.min(l, rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, data[i]);\n    }\n    return matrix;\n  }\n\n  static min(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static max(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new this(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static checkMatrix(value) {\n    return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);\n  }\n\n  static isMatrix(value) {\n    return value != null && value.klass === 'Matrix';\n  }\n\n  get size() {\n    return this.rows * this.columns;\n  }\n\n  apply(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        callback.call(this, i, j);\n      }\n    }\n    return this;\n  }\n\n  to1DArray() {\n    let array = [];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        array.push(this.get(i, j));\n      }\n    }\n    return array;\n  }\n\n  to2DArray() {\n    let copy = [];\n    for (let i = 0; i < this.rows; i++) {\n      copy.push([]);\n      for (let j = 0; j < this.columns; j++) {\n        copy[i].push(this.get(i, j));\n      }\n    }\n    return copy;\n  }\n\n  toJSON() {\n    return this.to2DArray();\n  }\n\n  isRowVector() {\n    return this.rows === 1;\n  }\n\n  isColumnVector() {\n    return this.columns === 1;\n  }\n\n  isVector() {\n    return this.rows === 1 || this.columns === 1;\n  }\n\n  isSquare() {\n    return this.rows === this.columns;\n  }\n\n  isEmpty() {\n    return this.rows === 0 || this.columns === 0;\n  }\n\n  isSymmetric() {\n    if (this.isSquare()) {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j <= i; j++) {\n          if (this.get(i, j) !== this.get(j, i)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  isEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isEchelonForm = false;\n          checked = true;\n        }\n      }\n      i++;\n    }\n    return isEchelonForm;\n  }\n\n  isReducedEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isReducedEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isReducedEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isReducedEchelonForm = false;\n          checked = true;\n        }\n      }\n      for (let k = j + 1; k < this.rows; k++) {\n        if (this.get(i, k) !== 0) {\n          isReducedEchelonForm = false;\n        }\n      }\n      i++;\n    }\n    return isReducedEchelonForm;\n  }\n\n  echelonForm() {\n    let result = this.clone();\n    let h = 0;\n    let k = 0;\n    while (h < result.rows && k < result.columns) {\n      let iMax = h;\n      for (let i = h; i < result.rows; i++) {\n        if (result.get(i, k) > result.get(iMax, k)) {\n          iMax = i;\n        }\n      }\n      if (result.get(iMax, k) === 0) {\n        k++;\n      } else {\n        result.swapRows(h, iMax);\n        let tmp = result.get(h, k);\n        for (let j = k; j < result.columns; j++) {\n          result.set(h, j, result.get(h, j) / tmp);\n        }\n        for (let i = h + 1; i < result.rows; i++) {\n          let factor = result.get(i, k) / result.get(h, k);\n          result.set(i, k, 0);\n          for (let j = k + 1; j < result.columns; j++) {\n            result.set(i, j, result.get(i, j) - result.get(h, j) * factor);\n          }\n        }\n        h++;\n        k++;\n      }\n    }\n    return result;\n  }\n\n  reducedEchelonForm() {\n    let result = this.echelonForm();\n    let m = result.columns;\n    let n = result.rows;\n    let h = n - 1;\n    while (h >= 0) {\n      if (result.maxRow(h) === 0) {\n        h--;\n      } else {\n        let p = 0;\n        let pivot = false;\n        while (p < n && pivot === false) {\n          if (result.get(h, p) === 1) {\n            pivot = true;\n          } else {\n            p++;\n          }\n        }\n        for (let i = 0; i < h; i++) {\n          let factor = result.get(i, p);\n          for (let j = p; j < m; j++) {\n            let tmp = result.get(i, j) - factor * result.get(h, j);\n            result.set(i, j, tmp);\n          }\n        }\n        h--;\n      }\n    }\n    return result;\n  }\n\n  set() {\n    throw new Error('set method is unimplemented');\n  }\n\n  get() {\n    throw new Error('get method is unimplemented');\n  }\n\n  repeat(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { rows = 1, columns = 1 } = options;\n    if (!Number.isInteger(rows) || rows <= 0) {\n      throw new TypeError('rows must be a positive integer');\n    }\n    if (!Number.isInteger(columns) || columns <= 0) {\n      throw new TypeError('columns must be a positive integer');\n    }\n    let matrix = new Matrix(this.rows * rows, this.columns * columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n      }\n    }\n    return matrix;\n  }\n\n  fill(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, value);\n      }\n    }\n    return this;\n  }\n\n  neg() {\n    return this.mulS(-1);\n  }\n\n  getRow(index) {\n    checkRowIndex(this, index);\n    let row = [];\n    for (let i = 0; i < this.columns; i++) {\n      row.push(this.get(index, i));\n    }\n    return row;\n  }\n\n  getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n  }\n\n  setRow(index, array) {\n    checkRowIndex(this, index);\n    array = checkRowVector(this, array);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, array[i]);\n    }\n    return this;\n  }\n\n  swapRows(row1, row2) {\n    checkRowIndex(this, row1);\n    checkRowIndex(this, row2);\n    for (let i = 0; i < this.columns; i++) {\n      let temp = this.get(row1, i);\n      this.set(row1, i, this.get(row2, i));\n      this.set(row2, i, temp);\n    }\n    return this;\n  }\n\n  getColumn(index) {\n    checkColumnIndex(this, index);\n    let column = [];\n    for (let i = 0; i < this.rows; i++) {\n      column.push(this.get(i, index));\n    }\n    return column;\n  }\n\n  getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n  }\n\n  setColumn(index, array) {\n    checkColumnIndex(this, index);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, array[i]);\n    }\n    return this;\n  }\n\n  swapColumns(column1, column2) {\n    checkColumnIndex(this, column1);\n    checkColumnIndex(this, column2);\n    for (let i = 0; i < this.rows; i++) {\n      let temp = this.get(i, column1);\n      this.set(i, column1, this.get(i, column2));\n      this.set(i, column2, temp);\n    }\n    return this;\n  }\n\n  addRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[j]);\n      }\n    }\n    return this;\n  }\n\n  subRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[j]);\n      }\n    }\n    return this;\n  }\n\n  mulRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[j]);\n      }\n    }\n    return this;\n  }\n\n  divRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[j]);\n      }\n    }\n    return this;\n  }\n\n  addColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[i]);\n      }\n    }\n    return this;\n  }\n\n  subColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[i]);\n      }\n    }\n    return this;\n  }\n\n  divColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulRow(index, value) {\n    checkRowIndex(this, index);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, this.get(index, i) * value);\n    }\n    return this;\n  }\n\n  mulColumn(index, value) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, this.get(i, index) * value);\n    }\n    return this;\n  }\n\n  max() {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, 0);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n        }\n      }\n    }\n    return v;\n  }\n\n  maxIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  min() {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, 0);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n        }\n      }\n    }\n    return v;\n  }\n\n  minIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  maxRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  maxRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  minRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  minRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  maxColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  maxColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  minColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  minColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  diag() {\n    let min = Math.min(this.rows, this.columns);\n    let diag = [];\n    for (let i = 0; i < min; i++) {\n      diag.push(this.get(i, i));\n    }\n    return diag;\n  }\n\n  norm(type = 'frobenius') {\n    let result = 0;\n    if (type === 'max') {\n      return this.max();\n    } else if (type === 'frobenius') {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j < this.columns; j++) {\n          result = result + this.get(i, j) * this.get(i, j);\n        }\n      }\n      return Math.sqrt(result);\n    } else {\n      throw new RangeError(`unknown norm type: ${type}`);\n    }\n  }\n\n  cumulativeSum() {\n    let sum = 0;\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        sum += this.get(i, j);\n        this.set(i, j, sum);\n      }\n    }\n    return this;\n  }\n\n  dot(vector2) {\n    if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n    let vector1 = this.to1DArray();\n    if (vector1.length !== vector2.length) {\n      throw new RangeError('vectors do not have the same size');\n    }\n    let dot = 0;\n    for (let i = 0; i < vector1.length; i++) {\n      dot += vector1[i] * vector2[i];\n    }\n    return dot;\n  }\n\n  mmul(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.columns;\n\n    let result = new Matrix(m, p);\n\n    let Bcolj = new Float64Array(n);\n    for (let j = 0; j < p; j++) {\n      for (let k = 0; k < n; k++) {\n        Bcolj[k] = other.get(k, j);\n      }\n\n      for (let i = 0; i < m; i++) {\n        let s = 0;\n        for (let k = 0; k < n; k++) {\n          s += this.get(i, k) * Bcolj[k];\n        }\n\n        result.set(i, j, s);\n      }\n    }\n    return result;\n  }\n\n  strassen2x2(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(2, 2);\n    const a11 = this.get(0, 0);\n    const b11 = other.get(0, 0);\n    const a12 = this.get(0, 1);\n    const b12 = other.get(0, 1);\n    const a21 = this.get(1, 0);\n    const b21 = other.get(1, 0);\n    const a22 = this.get(1, 1);\n    const b22 = other.get(1, 1);\n\n    // Compute intermediate values.\n    const m1 = (a11 + a22) * (b11 + b22);\n    const m2 = (a21 + a22) * b11;\n    const m3 = a11 * (b12 - b22);\n    const m4 = a22 * (b21 - b11);\n    const m5 = (a11 + a12) * b22;\n    const m6 = (a21 - a11) * (b11 + b12);\n    const m7 = (a12 - a22) * (b21 + b22);\n\n    // Combine intermediate values into the output.\n    const c00 = m1 + m4 - m5 + m7;\n    const c01 = m3 + m5;\n    const c10 = m2 + m4;\n    const c11 = m1 - m2 + m3 + m6;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    return result;\n  }\n\n  strassen3x3(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(3, 3);\n\n    const a00 = this.get(0, 0);\n    const a01 = this.get(0, 1);\n    const a02 = this.get(0, 2);\n    const a10 = this.get(1, 0);\n    const a11 = this.get(1, 1);\n    const a12 = this.get(1, 2);\n    const a20 = this.get(2, 0);\n    const a21 = this.get(2, 1);\n    const a22 = this.get(2, 2);\n\n    const b00 = other.get(0, 0);\n    const b01 = other.get(0, 1);\n    const b02 = other.get(0, 2);\n    const b10 = other.get(1, 0);\n    const b11 = other.get(1, 1);\n    const b12 = other.get(1, 2);\n    const b20 = other.get(2, 0);\n    const b21 = other.get(2, 1);\n    const b22 = other.get(2, 2);\n\n    const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n    const m2 = (a00 - a10) * (-b01 + b11);\n    const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n    const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n    const m5 = (a10 + a11) * (-b00 + b01);\n    const m6 = a00 * b00;\n    const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n    const m8 = (-a00 + a20) * (b02 - b12);\n    const m9 = (a20 + a21) * (-b00 + b02);\n    const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n    const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n    const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n    const m13 = (a02 - a22) * (b11 - b21);\n    const m14 = a02 * b20;\n    const m15 = (a21 + a22) * (-b20 + b21);\n    const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n    const m17 = (a02 - a12) * (b12 - b22);\n    const m18 = (a11 + a12) * (-b20 + b22);\n    const m19 = a01 * b10;\n    const m20 = a12 * b21;\n    const m21 = a10 * b02;\n    const m22 = a20 * b01;\n    const m23 = a22 * b22;\n\n    const c00 = m6 + m14 + m19;\n    const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n    const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n    const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n    const c11 = m2 + m4 + m5 + m6 + m20;\n    const c12 = m14 + m16 + m17 + m18 + m21;\n    const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n    const c21 = m12 + m13 + m14 + m15 + m22;\n    const c22 = m6 + m7 + m8 + m9 + m23;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(0, 2, c02);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    result.set(1, 2, c12);\n    result.set(2, 0, c20);\n    result.set(2, 1, c21);\n    result.set(2, 2, c22);\n    return result;\n  }\n\n  mmulStrassen(y) {\n    y = Matrix.checkMatrix(y);\n    let x = this.clone();\n    let r1 = x.rows;\n    let c1 = x.columns;\n    let r2 = y.rows;\n    let c2 = y.columns;\n    if (c1 !== r2) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`,\n      );\n    }\n\n    // Put a matrix into the top left of a matrix of zeros.\n    // `rows` and `cols` are the dimensions of the output matrix.\n    function embed(mat, rows, cols) {\n      let r = mat.rows;\n      let c = mat.columns;\n      if (r === rows && c === cols) {\n        return mat;\n      } else {\n        let resultat = AbstractMatrix.zeros(rows, cols);\n        resultat = resultat.setSubMatrix(mat, 0, 0);\n        return resultat;\n      }\n    }\n\n    // Make sure both matrices are the same size.\n    // This is exclusively for simplicity:\n    // this algorithm can be implemented with matrices of different sizes.\n\n    let r = Math.max(r1, r2);\n    let c = Math.max(c1, c2);\n    x = embed(x, r, c);\n    y = embed(y, r, c);\n\n    // Our recursive multiplication function.\n    function blockMult(a, b, rows, cols) {\n      // For small matrices, resort to naive multiplication.\n      if (rows <= 512 || cols <= 512) {\n        return a.mmul(b); // a is equivalent to this\n      }\n\n      // Apply dynamic padding.\n      if (rows % 2 === 1 && cols % 2 === 1) {\n        a = embed(a, rows + 1, cols + 1);\n        b = embed(b, rows + 1, cols + 1);\n      } else if (rows % 2 === 1) {\n        a = embed(a, rows + 1, cols);\n        b = embed(b, rows + 1, cols);\n      } else if (cols % 2 === 1) {\n        a = embed(a, rows, cols + 1);\n        b = embed(b, rows, cols + 1);\n      }\n\n      let halfRows = parseInt(a.rows / 2, 10);\n      let halfCols = parseInt(a.columns / 2, 10);\n      // Subdivide input matrices.\n      let a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      let b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n      let a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n      let b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n      let a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n      let b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n      let a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n      let b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n      // Compute intermediate values.\n      let m1 = blockMult(\n        AbstractMatrix.add(a11, a22),\n        AbstractMatrix.add(b11, b22),\n        halfRows,\n        halfCols,\n      );\n      let m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);\n      let m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);\n      let m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);\n      let m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);\n      let m6 = blockMult(\n        AbstractMatrix.sub(a21, a11),\n        AbstractMatrix.add(b11, b12),\n        halfRows,\n        halfCols,\n      );\n      let m7 = blockMult(\n        AbstractMatrix.sub(a12, a22),\n        AbstractMatrix.add(b21, b22),\n        halfRows,\n        halfCols,\n      );\n\n      // Combine intermediate values into the output.\n      let c11 = AbstractMatrix.add(m1, m4);\n      c11.sub(m5);\n      c11.add(m7);\n      let c12 = AbstractMatrix.add(m3, m5);\n      let c21 = AbstractMatrix.add(m2, m4);\n      let c22 = AbstractMatrix.sub(m1, m2);\n      c22.add(m3);\n      c22.add(m6);\n\n      // Crop output to the desired size (undo dynamic padding).\n      let resultat = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);\n      resultat = resultat.setSubMatrix(c11, 0, 0);\n      resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n      resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n      resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n      return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n    }\n\n    return blockMult(x, y, r, c);\n  }\n\n  scaleRows(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.rows; i++) {\n      const row = this.getRow(i);\n      if (row.length > 0) {\n        rescale(row, { min, max, output: row });\n      }\n      newMatrix.setRow(i, row);\n    }\n    return newMatrix;\n  }\n\n  scaleColumns(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.columns; i++) {\n      const column = this.getColumn(i);\n      if (column.length) {\n        rescale(column, {\n          min: min,\n          max: max,\n          output: column,\n        });\n      }\n      newMatrix.setColumn(i, column);\n    }\n    return newMatrix;\n  }\n\n  flipRows() {\n    const middle = Math.ceil(this.columns / 2);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < middle; j++) {\n        let first = this.get(i, j);\n        let last = this.get(i, this.columns - 1 - j);\n        this.set(i, j, last);\n        this.set(i, this.columns - 1 - j, first);\n      }\n    }\n    return this;\n  }\n\n  flipColumns() {\n    const middle = Math.ceil(this.rows / 2);\n    for (let j = 0; j < this.columns; j++) {\n      for (let i = 0; i < middle; i++) {\n        let first = this.get(i, j);\n        let last = this.get(this.rows - 1 - i, j);\n        this.set(i, j, last);\n        this.set(this.rows - 1 - i, j, first);\n      }\n    }\n    return this;\n  }\n\n  kroneckerProduct(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.rows;\n    let q = other.columns;\n\n    let result = new Matrix(m * p, n * q);\n    for (let i = 0; i < m; i++) {\n      for (let j = 0; j < n; j++) {\n        for (let k = 0; k < p; k++) {\n          for (let l = 0; l < q; l++) {\n            result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  kroneckerSum(other) {\n    other = Matrix.checkMatrix(other);\n    if (!this.isSquare() || !other.isSquare()) {\n      throw new Error('Kronecker Sum needs two Square Matrices');\n    }\n    let m = this.rows;\n    let n = other.rows;\n    let AxI = this.kroneckerProduct(Matrix.eye(n, n));\n    let IxB = Matrix.eye(m, m).kroneckerProduct(other);\n    return AxI.add(IxB);\n  }\n\n  transpose() {\n    let result = new Matrix(this.columns, this.rows);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        result.set(j, i, this.get(i, j));\n      }\n    }\n    return result;\n  }\n\n  sortRows(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.rows; i++) {\n      this.setRow(i, this.getRow(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  sortColumns(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.columns; i++) {\n      this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  subMatrix(startRow, endRow, startColumn, endColumn) {\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    let newMatrix = new Matrix(\n      endRow - startRow + 1,\n      endColumn - startColumn + 1,\n    );\n    for (let i = startRow; i <= endRow; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        newMatrix.set(i - startRow, j - startColumn, this.get(i, j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixRow(indices, startColumn, endColumn) {\n    if (startColumn === undefined) startColumn = 0;\n    if (endColumn === undefined) endColumn = this.columns - 1;\n    if (\n      startColumn > endColumn ||\n      startColumn < 0 ||\n      startColumn >= this.columns ||\n      endColumn < 0 ||\n      endColumn >= this.columns\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        if (indices[i] < 0 || indices[i] >= this.rows) {\n          throw new RangeError(`Row index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixColumn(indices, startRow, endRow) {\n    if (startRow === undefined) startRow = 0;\n    if (endRow === undefined) endRow = this.rows - 1;\n    if (\n      startRow > endRow ||\n      startRow < 0 ||\n      startRow >= this.rows ||\n      endRow < 0 ||\n      endRow >= this.rows\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(endRow - startRow + 1, indices.length);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startRow; j <= endRow; j++) {\n        if (indices[i] < 0 || indices[i] >= this.columns) {\n          throw new RangeError(`Column index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n      }\n    }\n    return newMatrix;\n  }\n\n  setSubMatrix(matrix, startRow, startColumn) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (matrix.isEmpty()) {\n      return this;\n    }\n    let endRow = startRow + matrix.rows - 1;\n    let endColumn = startColumn + matrix.columns - 1;\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    for (let i = 0; i < matrix.rows; i++) {\n      for (let j = 0; j < matrix.columns; j++) {\n        this.set(startRow + i, startColumn + j, matrix.get(i, j));\n      }\n    }\n    return this;\n  }\n\n  selection(rowIndices, columnIndices) {\n    let indices = checkIndices(this, rowIndices, columnIndices);\n    let newMatrix = new Matrix(rowIndices.length, columnIndices.length);\n    for (let i = 0; i < indices.row.length; i++) {\n      let rowIndex = indices.row[i];\n      for (let j = 0; j < indices.column.length; j++) {\n        let columnIndex = indices.column[j];\n        newMatrix.set(i, j, this.get(rowIndex, columnIndex));\n      }\n    }\n    return newMatrix;\n  }\n\n  trace() {\n    let min = Math.min(this.rows, this.columns);\n    let trace = 0;\n    for (let i = 0; i < min; i++) {\n      trace += this.get(i, i);\n    }\n    return trace;\n  }\n\n  clone() {\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let row = 0; row < this.rows; row++) {\n      for (let column = 0; column < this.columns; column++) {\n        newMatrix.set(row, column, this.get(row, column));\n      }\n    }\n    return newMatrix;\n  }\n\n  sum(by) {\n    switch (by) {\n      case 'row':\n        return sumByRow(this);\n      case 'column':\n        return sumByColumn(this);\n      case undefined:\n        return sumAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  product(by) {\n    switch (by) {\n      case 'row':\n        return productByRow(this);\n      case 'column':\n        return productByColumn(this);\n      case undefined:\n        return productAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  mean(by) {\n    const sum = this.sum(by);\n    switch (by) {\n      case 'row': {\n        for (let i = 0; i < this.rows; i++) {\n          sum[i] /= this.columns;\n        }\n        return sum;\n      }\n      case 'column': {\n        for (let i = 0; i < this.columns; i++) {\n          sum[i] /= this.rows;\n        }\n        return sum;\n      }\n      case undefined:\n        return sum / this.size;\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  variance(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { unbiased = true, mean = this.mean(by) } = options;\n    if (typeof unbiased !== 'boolean') {\n      throw new TypeError('unbiased must be a boolean');\n    }\n    switch (by) {\n      case 'row': {\n        if (!Array.isArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByRow(this, unbiased, mean);\n      }\n      case 'column': {\n        if (!Array.isArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByColumn(this, unbiased, mean);\n      }\n      case undefined: {\n        if (typeof mean !== 'number') {\n          throw new TypeError('mean must be a number');\n        }\n        return varianceAll(this, unbiased, mean);\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  standardDeviation(by, options) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    const variance = this.variance(by, options);\n    if (by === undefined) {\n      return Math.sqrt(variance);\n    } else {\n      for (let i = 0; i < variance.length; i++) {\n        variance[i] = Math.sqrt(variance[i]);\n      }\n      return variance;\n    }\n  }\n\n  center(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { center = this.mean(by) } = options;\n    switch (by) {\n      case 'row': {\n        if (!Array.isArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByRow(this, center);\n        return this;\n      }\n      case 'column': {\n        if (!Array.isArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByColumn(this, center);\n        return this;\n      }\n      case undefined: {\n        if (typeof center !== 'number') {\n          throw new TypeError('center must be a number');\n        }\n        centerAll(this, center);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  scale(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    let scale = options.scale;\n    switch (by) {\n      case 'row': {\n        if (scale === undefined) {\n          scale = getScaleByRow(this);\n        } else if (!Array.isArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByRow(this, scale);\n        return this;\n      }\n      case 'column': {\n        if (scale === undefined) {\n          scale = getScaleByColumn(this);\n        } else if (!Array.isArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByColumn(this, scale);\n        return this;\n      }\n      case undefined: {\n        if (scale === undefined) {\n          scale = getScaleAll(this);\n        } else if (typeof scale !== 'number') {\n          throw new TypeError('scale must be a number');\n        }\n        scaleAll(this, scale);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  toString(options) {\n    return inspectMatrixWithOptions(this, options);\n  }\n}\n\nAbstractMatrix.prototype.klass = 'Matrix';\nif (typeof Symbol !== 'undefined') {\n  AbstractMatrix.prototype[Symbol.for('nodejs.util.inspect.custom')] =\n    inspectMatrix;\n}\n\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\n// Synonyms\nAbstractMatrix.random = AbstractMatrix.rand;\nAbstractMatrix.randomInt = AbstractMatrix.randInt;\nAbstractMatrix.diagonal = AbstractMatrix.diag;\nAbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;\nAbstractMatrix.identity = AbstractMatrix.eye;\nAbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;\nAbstractMatrix.prototype.tensorProduct =\n  AbstractMatrix.prototype.kroneckerProduct;\n\nexport default class Matrix extends AbstractMatrix {\n  constructor(nRows, nColumns) {\n    super();\n    if (Matrix.isMatrix(nRows)) {\n      // eslint-disable-next-line no-constructor-return\n      return nRows.clone();\n    } else if (Number.isInteger(nRows) && nRows >= 0) {\n      // Create an empty matrix\n      this.data = [];\n      if (Number.isInteger(nColumns) && nColumns >= 0) {\n        for (let i = 0; i < nRows; i++) {\n          this.data.push(new Float64Array(nColumns));\n        }\n      } else {\n        throw new TypeError('nColumns must be a positive integer');\n      }\n    } else if (Array.isArray(nRows)) {\n      // Copy the values from the 2D array\n      const arrayData = nRows;\n      nRows = arrayData.length;\n      nColumns = nRows ? arrayData[0].length : 0;\n      if (typeof nColumns !== 'number') {\n        throw new TypeError(\n          'Data must be a 2D array with at least one element',\n        );\n      }\n      this.data = [];\n      for (let i = 0; i < nRows; i++) {\n        if (arrayData[i].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n        this.data.push(Float64Array.from(arrayData[i]));\n      }\n    } else {\n      throw new TypeError(\n        'First argument must be a positive number or an array',\n      );\n    }\n    this.rows = nRows;\n    this.columns = nColumns;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n\n  removeRow(index) {\n    checkRowIndex(this, index);\n    this.data.splice(index, 1);\n    this.rows -= 1;\n    return this;\n  }\n\n  addRow(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.rows;\n    }\n    checkRowIndex(this, index, true);\n    array = Float64Array.from(checkRowVector(this, array));\n    this.data.splice(index, 0, array);\n    this.rows += 1;\n    return this;\n  }\n\n  removeColumn(index) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns - 1);\n      for (let j = 0; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      for (let j = index + 1; j < this.columns; j++) {\n        newRow[j - 1] = this.data[i][j];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns -= 1;\n    return this;\n  }\n\n  addColumn(index, array) {\n    if (typeof array === 'undefined') {\n      array = index;\n      index = this.columns;\n    }\n    checkColumnIndex(this, index, true);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns + 1);\n      let j = 0;\n      for (; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      newRow[j++] = array[i];\n      for (; j < this.columns + 1; j++) {\n        newRow[j] = this.data[i][j - 1];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns += 1;\n    return this;\n  }\n}\n\ninstallMathOperations(AbstractMatrix, Matrix);\n","import SVD from './dc/svd';\nimport Matrix from './matrix';\n\nexport function pseudoInverse(matrix, threshold = Number.EPSILON) {\n  matrix = Matrix.checkMatrix(matrix);\n  if (matrix.isEmpty()) {\n    // with a zero dimension, the pseudo-inverse is the transpose, since all 0xn and nx0 matrices are singular\n    // (0xn)*(nx0)*(0xn) = 0xn\n    // (nx0)*(0xn)*(nx0) = nx0\n    return matrix.transpose();\n  }\n  let svdSolution = new SVD(matrix, { autoTranspose: true });\n\n  let U = svdSolution.leftSingularVectors;\n  let V = svdSolution.rightSingularVectors;\n  let s = svdSolution.diagonal;\n\n  for (let i = 0; i < s.length; i++) {\n    if (Math.abs(s[i]) > threshold) {\n      s[i] = 1.0 / s[i];\n    } else {\n      s[i] = 0.0;\n    }\n  }\n\n  return V.mmul(Matrix.diag(s).mmul(U.transpose()));\n}\n","import { newArray } from './util';\n\nexport function sumByRow(matrix) {\n  let sum = newArray(matrix.rows);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function sumByColumn(matrix) {\n  let sum = newArray(matrix.columns);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function sumAll(matrix) {\n  let v = 0;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v += matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nexport function productByRow(matrix) {\n  let sum = newArray(matrix.rows, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function productByColumn(matrix) {\n  let sum = newArray(matrix.columns, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function productAll(matrix) {\n  let v = 1;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v *= matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nexport function varianceByRow(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let i = 0; i < rows; i++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean[i];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / cols) / (cols - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / cols) / cols);\n    }\n  }\n  return variance;\n}\n\nexport function varianceByColumn(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let j = 0; j < cols; j++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let i = 0; i < rows; i++) {\n      x = matrix.get(i, j) - mean[j];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / rows) / (rows - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / rows) / rows);\n    }\n  }\n  return variance;\n}\n\nexport function varianceAll(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const size = rows * cols;\n\n  let sum1 = 0;\n  let sum2 = 0;\n  let x = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean;\n      sum1 += x;\n      sum2 += x * x;\n    }\n  }\n  if (unbiased) {\n    return (sum2 - (sum1 * sum1) / size) / (size - 1);\n  } else {\n    return (sum2 - (sum1 * sum1) / size) / size;\n  }\n}\n\nexport function centerByRow(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[i]);\n    }\n  }\n}\n\nexport function centerByColumn(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[j]);\n    }\n  }\n}\n\nexport function centerAll(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean);\n    }\n  }\n}\n\nexport function getScaleByRow(matrix) {\n  const scale = [];\n  for (let i = 0; i < matrix.rows; i++) {\n    let sum = 0;\n    for (let j = 0; j < matrix.columns; j++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.columns - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nexport function scaleByRow(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[i]);\n    }\n  }\n}\n\nexport function getScaleByColumn(matrix) {\n  const scale = [];\n  for (let j = 0; j < matrix.columns; j++) {\n    let sum = 0;\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.rows - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nexport function scaleByColumn(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[j]);\n    }\n  }\n}\n\nexport function getScaleAll(matrix) {\n  const divider = matrix.size - 1;\n  let sum = 0;\n  for (let j = 0; j < matrix.columns; j++) {\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / divider;\n    }\n  }\n  return Math.sqrt(sum);\n}\n\nexport function scaleAll(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale);\n    }\n  }\n}\n","/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkRowIndex(matrix, index, outer) {\n  let max = outer ? matrix.rows : matrix.rows - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Row index out of range');\n  }\n}\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkColumnIndex(matrix, index, outer) {\n  let max = outer ? matrix.columns : matrix.columns - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Column index out of range');\n  }\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkRowVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.columns) {\n    throw new RangeError(\n      'vector size must be the same as the number of columns',\n    );\n  }\n  return vector;\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkColumnVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.rows) {\n    throw new RangeError('vector size must be the same as the number of rows');\n  }\n  return vector;\n}\n\nexport function checkIndices(matrix, rowIndices, columnIndices) {\n  return {\n    row: checkRowIndices(matrix, rowIndices),\n    column: checkColumnIndices(matrix, columnIndices),\n  };\n}\n\nexport function checkRowIndices(matrix, rowIndices) {\n  if (typeof rowIndices !== 'object') {\n    throw new TypeError('unexpected type for row indices');\n  }\n\n  let rowOut = rowIndices.some((r) => {\n    return r < 0 || r >= matrix.rows;\n  });\n\n  if (rowOut) {\n    throw new RangeError('row indices are out of range');\n  }\n\n  if (!Array.isArray(rowIndices)) rowIndices = Array.from(rowIndices);\n\n  return rowIndices;\n}\n\nexport function checkColumnIndices(matrix, columnIndices) {\n  if (typeof columnIndices !== 'object') {\n    throw new TypeError('unexpected type for column indices');\n  }\n\n  let columnOut = columnIndices.some((c) => {\n    return c < 0 || c >= matrix.columns;\n  });\n\n  if (columnOut) {\n    throw new RangeError('column indices are out of range');\n  }\n  if (!Array.isArray(columnIndices)) columnIndices = Array.from(columnIndices);\n\n  return columnIndices;\n}\n\nexport function checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n  if (arguments.length !== 5) {\n    throw new RangeError('expected 4 arguments');\n  }\n  checkNumber('startRow', startRow);\n  checkNumber('endRow', endRow);\n  checkNumber('startColumn', startColumn);\n  checkNumber('endColumn', endColumn);\n  if (\n    startRow > endRow ||\n    startColumn > endColumn ||\n    startRow < 0 ||\n    startRow >= matrix.rows ||\n    endRow < 0 ||\n    endRow >= matrix.rows ||\n    startColumn < 0 ||\n    startColumn >= matrix.columns ||\n    endColumn < 0 ||\n    endColumn >= matrix.columns\n  ) {\n    throw new RangeError('Submatrix indices are out of range');\n  }\n}\n\nexport function newArray(length, value = 0) {\n  let array = [];\n  for (let i = 0; i < length; i++) {\n    array.push(value);\n  }\n  return array;\n}\n\nfunction checkNumber(name, value) {\n  if (typeof value !== 'number') {\n    throw new TypeError(`${name} must be a number`);\n  }\n}\n\nexport function checkNonEmpty(matrix) {\n  if (matrix.isEmpty()) {\n    throw new Error('Empty matrix has no elements to index');\n  }\n}\n","import { AbstractMatrix } from '../matrix';\n\nexport default class BaseView extends AbstractMatrix {\n  constructor(matrix, rows, columns) {\n    super();\n    this.matrix = matrix;\n    this.rows = rows;\n    this.columns = columns;\n  }\n}\n","import { checkColumnIndex } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixColumnView extends BaseView {\n  constructor(matrix, column) {\n    checkColumnIndex(matrix, column);\n    super(matrix, matrix.rows, 1);\n    this.column = column;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.column, value);\n    return this;\n  }\n\n  get(rowIndex) {\n    return this.matrix.get(rowIndex, this.column);\n  }\n}\n","import { checkColumnIndices } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixColumnSelectionView extends BaseView {\n  constructor(matrix, columnIndices) {\n    columnIndices = checkColumnIndices(matrix, columnIndices);\n    super(matrix, matrix.rows, columnIndices.length);\n    this.columnIndices = columnIndices;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.columnIndices[columnIndex], value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(rowIndex, this.columnIndices[columnIndex]);\n  }\n}\n","import BaseView from './base';\n\nexport default class MatrixFlipColumnView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.rows, matrix.columns);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(rowIndex, this.columns - columnIndex - 1);\n  }\n}\n","import BaseView from './base';\n\nexport default class MatrixFlipRowView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.rows, matrix.columns);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.rows - rowIndex - 1, columnIndex);\n  }\n}\n","export { default as MatrixColumnView } from './column';\nexport { default as MatrixColumnSelectionView } from './columnSelection';\nexport { default as MatrixFlipColumnView } from './flipColumn';\nexport { default as MatrixFlipRowView } from './flipRow';\nexport { default as MatrixRowView } from './row';\nexport { default as MatrixRowSelectionView } from './rowSelection';\nexport { default as MatrixSelectionView } from './selection';\nexport { default as MatrixSubView } from './sub';\nexport { default as MatrixTransposeView } from './transpose';\n","import { checkRowIndex } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixRowView extends BaseView {\n  constructor(matrix, row) {\n    checkRowIndex(matrix, row);\n    super(matrix, 1, matrix.columns);\n    this.row = row;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.row, columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.row, columnIndex);\n  }\n}\n","import { checkRowIndices } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixRowSelectionView extends BaseView {\n  constructor(matrix, rowIndices) {\n    rowIndices = checkRowIndices(matrix, rowIndices);\n    super(matrix, rowIndices.length, matrix.columns);\n    this.rowIndices = rowIndices;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.rowIndices[rowIndex], columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.rowIndices[rowIndex], columnIndex);\n  }\n}\n","import { checkIndices } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixSelectionView extends BaseView {\n  constructor(matrix, rowIndices, columnIndices) {\n    let indices = checkIndices(matrix, rowIndices, columnIndices);\n    super(matrix, indices.row.length, indices.column.length);\n    this.rowIndices = indices.row;\n    this.columnIndices = indices.column;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(\n      this.rowIndices[rowIndex],\n      this.columnIndices[columnIndex],\n      value,\n    );\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(\n      this.rowIndices[rowIndex],\n      this.columnIndices[columnIndex],\n    );\n  }\n}\n","import { checkRange } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixSubView extends BaseView {\n  constructor(matrix, startRow, endRow, startColumn, endColumn) {\n    checkRange(matrix, startRow, endRow, startColumn, endColumn);\n    super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);\n    this.startRow = startRow;\n    this.startColumn = startColumn;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(\n      this.startRow + rowIndex,\n      this.startColumn + columnIndex,\n      value,\n    );\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(\n      this.startRow + rowIndex,\n      this.startColumn + columnIndex,\n    );\n  }\n}\n","import BaseView from './base';\n\nexport default class MatrixTransposeView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.columns, matrix.rows);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(columnIndex, rowIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(columnIndex, rowIndex);\n  }\n}\n","import { AbstractMatrix } from '../matrix';\n\nexport default class WrapperMatrix1D extends AbstractMatrix {\n  constructor(data, options = {}) {\n    const { rows = 1 } = options;\n\n    if (data.length % rows !== 0) {\n      throw new Error('the data length is not divisible by the number of rows');\n    }\n    super();\n    this.rows = rows;\n    this.columns = data.length / rows;\n    this.data = data;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    let index = this._calculateIndex(rowIndex, columnIndex);\n    this.data[index] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    let index = this._calculateIndex(rowIndex, columnIndex);\n    return this.data[index];\n  }\n\n  _calculateIndex(row, column) {\n    return row * this.columns + column;\n  }\n}\n","import { AbstractMatrix } from '../matrix';\n\nexport default class WrapperMatrix2D extends AbstractMatrix {\n  constructor(data) {\n    super();\n    this.data = data;\n    this.rows = data.length;\n    this.columns = data[0].length;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n}\n","import WrapperMatrix1D from './WrapperMatrix1D';\nimport WrapperMatrix2D from './WrapperMatrix2D';\n\nexport function wrap(array, options) {\n  if (Array.isArray(array)) {\n    if (array[0] && Array.isArray(array[0])) {\n      return new WrapperMatrix2D(array);\n    } else {\n      return new WrapperMatrix1D(array, options);\n    }\n  } else {\n    throw new Error('the argument is not an array');\n  }\n}\n","import isAnyArray from 'is-any-array';\n\nexport default function checkArraySize(x, y) {\n  if (!isAnyArray(x) || !isAnyArray(y)) {\n    throw new TypeError('x and y must be arrays');\n  }\n  if (x.length !== y.length) {\n    throw new RangeError('x and y arrays must have the same length');\n  }\n}\n","import isAnyArray from 'is-any-array';\n\nexport { default as maybeToPrecision } from './maybeToPrecision';\nexport { default as checkArrayLength } from './checkArrayLength';\n\nexport default class BaseRegression {\n  constructor() {\n    if (new.target === BaseRegression) {\n      throw new Error('BaseRegression must be subclassed');\n    }\n  }\n\n  predict(x) {\n    if (typeof x === 'number') {\n      return this._predict(x);\n    } else if (isAnyArray(x)) {\n      const y = [];\n      for (let i = 0; i < x.length; i++) {\n        y.push(this._predict(x[i]));\n      }\n      return y;\n    } else {\n      throw new TypeError('x must be a number or array');\n    }\n  }\n\n  _predict() {\n    throw new Error('_predict must be implemented');\n  }\n\n  train() {\n    // Do nothing for this package\n  }\n\n  toString() {\n    return '';\n  }\n\n  toLaTeX() {\n    return '';\n  }\n\n  /**\n   * Return the correlation coefficient of determination (r) and chi-square.\n   * @param {Array<number>} x\n   * @param {Array<number>} y\n   * @return {object}\n   */\n  score(x, y) {\n    if (!isAnyArray(x) || !isAnyArray(y) || x.length !== y.length) {\n      throw new Error('x and y must be arrays of the same length');\n    }\n\n    const n = x.length;\n    const y2 = new Array(n);\n    for (let i = 0; i < n; i++) {\n      y2[i] = this._predict(x[i]);\n    }\n\n    let xSum = 0;\n    let ySum = 0;\n    let chi2 = 0;\n    let rmsd = 0;\n    let xSquared = 0;\n    let ySquared = 0;\n    let xY = 0;\n    for (let i = 0; i < n; i++) {\n      xSum += y2[i];\n      ySum += y[i];\n      xSquared += y2[i] * y2[i];\n      ySquared += y[i] * y[i];\n      xY += y2[i] * y[i];\n      if (y[i] !== 0) {\n        chi2 += ((y[i] - y2[i]) * (y[i] - y2[i])) / y[i];\n      }\n      rmsd += (y[i] - y2[i]) * (y[i] - y2[i]);\n    }\n\n    const r =\n      (n * xY - xSum * ySum) /\n      Math.sqrt((n * xSquared - xSum * xSum) * (n * ySquared - ySum * ySum));\n\n    return {\n      r: r,\n      r2: r * r,\n      chi2: chi2,\n      rmsd: Math.sqrt(rmsd / n),\n    };\n  }\n}\n","export default function maybeToPrecision(value, digits) {\n  if (value < 0) {\n    value = 0 - value;\n    if (typeof digits === 'number') {\n      return `- ${value.toPrecision(digits)}`;\n    } else {\n      return `- ${value.toString()}`;\n    }\n  } else {\n    if (typeof digits === 'number') {\n      return value.toPrecision(digits);\n    } else {\n      return value.toString();\n    }\n  }\n}\n","import BaseRegression, {\r\n  checkArrayLength,\r\n  maybeToPrecision,\r\n} from 'ml-regression-base';\r\nimport SimpleLinearRegression from 'ml-regression-simple-linear';\r\n\r\nexport default class ExponentialRegression extends BaseRegression {\r\n  constructor(x, y) {\r\n    super();\r\n    if (x === true) {\r\n      this.A = y.A;\r\n      this.B = y.B;\r\n    } else {\r\n      checkArrayLength(x, y);\r\n      regress(this, x, y);\r\n    }\r\n  }\r\n\r\n  _predict(input) {\r\n    return this.B * Math.exp(input * this.A);\r\n  }\r\n\r\n  toJSON() {\r\n    return {\r\n      name: 'exponentialRegression',\r\n      A: this.A,\r\n      B: this.B,\r\n    };\r\n  }\r\n\r\n  toString(precision) {\r\n    return `f(x) = ${maybeToPrecision(\r\n      this.B,\r\n      precision,\r\n    )} * e^(${maybeToPrecision(this.A, precision)} * x)`;\r\n  }\r\n\r\n  toLaTeX(precision) {\r\n    if (this.A >= 0) {\r\n      return `f(x) = ${maybeToPrecision(\r\n        this.B,\r\n        precision,\r\n      )}e^{${maybeToPrecision(this.A, precision)}x}`;\r\n    } else {\r\n      return `f(x) = \\\\frac{${maybeToPrecision(\r\n        this.B,\r\n        precision,\r\n      )}}{e^{${maybeToPrecision(-this.A, precision)}x}}`;\r\n    }\r\n  }\r\n\r\n  static load(json) {\r\n    if (json.name !== 'exponentialRegression') {\r\n      throw new TypeError('not a exponential regression model');\r\n    }\r\n    return new ExponentialRegression(true, json);\r\n  }\r\n}\r\n\r\nfunction regress(er, x, y) {\r\n  const n = x.length;\r\n  const yl = new Array(n);\r\n  for (let i = 0; i < n; i++) {\r\n    yl[i] = Math.log(y[i]);\r\n  }\r\n\r\n  const linear = new SimpleLinearRegression(x, yl);\r\n  er.A = linear.slope;\r\n  er.B = Math.exp(linear.intercept);\r\n}\r\n","import { Matrix, MatrixTransposeView, solve } from 'ml-matrix';\nimport BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision,\n} from 'ml-regression-base';\n\nexport default class PolynomialRegression extends BaseRegression {\n  constructor(x, y, degree) {\n    super();\n    if (x === true) {\n      this.degree = y.degree;\n      this.powers = y.powers;\n      this.coefficients = y.coefficients;\n    } else {\n      checkArrayLength(x, y);\n      regress(this, x, y, degree);\n    }\n  }\n\n  _predict(x) {\n    let y = 0;\n    for (let k = 0; k < this.powers.length; k++) {\n      y += this.coefficients[k] * Math.pow(x, this.powers[k]);\n    }\n    return y;\n  }\n\n  toJSON() {\n    return {\n      name: 'polynomialRegression',\n      degree: this.degree,\n      powers: this.powers,\n      coefficients: this.coefficients,\n    };\n  }\n\n  toString(precision) {\n    return this._toFormula(precision, false);\n  }\n\n  toLaTeX(precision) {\n    return this._toFormula(precision, true);\n  }\n\n  _toFormula(precision, isLaTeX) {\n    let sup = '^';\n    let closeSup = '';\n    let times = ' * ';\n    if (isLaTeX) {\n      sup = '^{';\n      closeSup = '}';\n      times = '';\n    }\n\n    let fn = '';\n    let str = '';\n    for (let k = 0; k < this.coefficients.length; k++) {\n      str = '';\n      if (this.coefficients[k] !== 0) {\n        if (this.powers[k] === 0) {\n          str = maybeToPrecision(this.coefficients[k], precision);\n        } else {\n          if (this.powers[k] === 1) {\n            str = `${maybeToPrecision(this.coefficients[k], precision) +\n              times}x`;\n          } else {\n            str = `${maybeToPrecision(this.coefficients[k], precision) +\n              times}x${sup}${this.powers[k]}${closeSup}`;\n          }\n        }\n\n        if (this.coefficients[k] > 0 && k !== this.coefficients.length - 1) {\n          str = ` + ${str}`;\n        } else if (k !== this.coefficients.length - 1) {\n          str = ` ${str}`;\n        }\n      }\n      fn = str + fn;\n    }\n    if (fn.charAt(0) === '+') {\n      fn = fn.slice(1);\n    }\n\n    return `f(x) = ${fn}`;\n  }\n\n  static load(json) {\n    if (json.name !== 'polynomialRegression') {\n      throw new TypeError('not a polynomial regression model');\n    }\n    return new PolynomialRegression(true, json);\n  }\n}\n\nfunction regress(pr, x, y, degree) {\n  const n = x.length;\n  let powers;\n  if (Array.isArray(degree)) {\n    powers = degree;\n    degree = powers.length;\n  } else {\n    degree++;\n    powers = new Array(degree);\n    for (let k = 0; k < degree; k++) {\n      powers[k] = k;\n    }\n  }\n  const F = new Matrix(n, degree);\n  const Y = new Matrix([y]);\n  for (let k = 0; k < degree; k++) {\n    for (let i = 0; i < n; i++) {\n      if (powers[k] === 0) {\n        F.set(i, k, 1);\n      } else {\n        F.set(i, k, Math.pow(x[i], powers[k]));\n      }\n    }\n  }\n\n  const FT = new MatrixTransposeView(F);\n  const A = FT.mmul(F);\n  const B = FT.mmul(new MatrixTransposeView(Y));\n\n  pr.degree = degree - 1;\n  pr.powers = powers;\n  pr.coefficients = solve(A, B).to1DArray();\n}\n","import BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision\n} from 'ml-regression-base';\nimport SimpleLinearRegression from 'ml-regression-simple-linear';\n\nexport default class PowerRegression extends BaseRegression {\n  constructor(x, y) {\n    super();\n    if (x === true) {\n      // reloading model\n      this.A = y.A;\n      this.B = y.B;\n    } else {\n      checkArrayLength(x, y);\n      regress(this, x, y);\n    }\n  }\n\n  _predict(newInputs) {\n    return this.A * Math.pow(newInputs, this.B);\n  }\n\n  toJSON() {\n    return {\n      name: 'powerRegression',\n      A: this.A,\n      B: this.B\n    };\n  }\n\n  toString(precision) {\n    return `f(x) = ${maybeToPrecision(\n      this.A,\n      precision\n    )} * x^${maybeToPrecision(this.B, precision)}`;\n  }\n\n  toLaTeX(precision) {\n    let latex = '';\n    if (this.B >= 0) {\n      latex = `f(x) = ${maybeToPrecision(\n        this.A,\n        precision\n      )}x^{${maybeToPrecision(this.B, precision)}}`;\n    } else {\n      latex = `f(x) = \\\\frac{${maybeToPrecision(\n        this.A,\n        precision\n      )}}{x^{${maybeToPrecision(-this.B, precision)}}}`;\n    }\n    latex = latex.replace(/e([+-]?[0-9]+)/g, 'e^{$1}');\n    return latex;\n  }\n\n  static load(json) {\n    if (json.name !== 'powerRegression') {\n      throw new TypeError('not a power regression model');\n    }\n    return new PowerRegression(true, json);\n  }\n}\n\nfunction regress(pr, x, y) {\n  const n = x.length;\n  const xl = new Array(n);\n  const yl = new Array(n);\n  for (let i = 0; i < n; i++) {\n    xl[i] = Math.log(x[i]);\n    yl[i] = Math.log(y[i]);\n  }\n\n  const linear = new SimpleLinearRegression(xl, yl);\n  pr.A = Math.exp(linear.intercept);\n  pr.B = linear.slope;\n}\n","import BaseRegression, {\r\n  checkArrayLength,\r\n  maybeToPrecision,\r\n} from 'ml-regression-base';\r\n\r\nexport default class SimpleLinearRegression extends BaseRegression {\r\n  constructor(x, y) {\r\n    super();\r\n    if (x === true) {\r\n      this.slope = y.slope;\r\n      this.intercept = y.intercept;\r\n      this.coefficients = [y.intercept, y.slope];\r\n    } else {\r\n      checkArrayLength(x, y);\r\n      regress(this, x, y);\r\n    }\r\n  }\r\n\r\n  toJSON() {\r\n    return {\r\n      name: 'simpleLinearRegression',\r\n      slope: this.slope,\r\n      intercept: this.intercept,\r\n    };\r\n  }\r\n\r\n  _predict(x) {\r\n    return this.slope * x + this.intercept;\r\n  }\r\n\r\n  computeX(y) {\r\n    return (y - this.intercept) / this.slope;\r\n  }\r\n\r\n  toString(precision) {\r\n    let result = 'f(x) = ';\r\n    if (this.slope !== 0) {\r\n      const xFactor = maybeToPrecision(this.slope, precision);\r\n      result += `${xFactor === '1' ? '' : `${xFactor} * `}x`;\r\n      if (this.intercept !== 0) {\r\n        const absIntercept = Math.abs(this.intercept);\r\n        const operator = absIntercept === this.intercept ? '+' : '-';\r\n        result += ` ${operator} ${maybeToPrecision(absIntercept, precision)}`;\r\n      }\r\n    } else {\r\n      result += maybeToPrecision(this.intercept, precision);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  toLaTeX(precision) {\r\n    return this.toString(precision);\r\n  }\r\n\r\n  static load(json) {\r\n    if (json.name !== 'simpleLinearRegression') {\r\n      throw new TypeError('not a SLR model');\r\n    }\r\n    return new SimpleLinearRegression(true, json);\r\n  }\r\n}\r\n\r\nfunction regress(slr, x, y) {\r\n  const n = x.length;\r\n  let xSum = 0;\r\n  let ySum = 0;\r\n\r\n  let xSquared = 0;\r\n  let xY = 0;\r\n\r\n  for (let i = 0; i < n; i++) {\r\n    xSum += x[i];\r\n    ySum += y[i];\r\n    xSquared += x[i] * x[i];\r\n    xY += x[i] * y[i];\r\n  }\r\n\r\n  const numerator = n * xY - xSum * ySum;\r\n  slr.slope = numerator / (n * xSquared - xSum * xSum);\r\n  slr.intercept = (1 / n) * ySum - slr.slope * (1 / n) * xSum;\r\n  slr.coefficients = [slr.intercept, slr.slope];\r\n}\r\n","import BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision\n} from 'ml-regression-base';\nimport median from 'ml-array-median';\n\nexport default class TheilSenRegression extends BaseRegression {\n  /**\n   * Theil–Sen estimator\n   * https://en.wikipedia.org/wiki/Theil%E2%80%93Sen_estimator\n   * @param {Array<number>|boolean} x\n   * @param {Array<number>|object} y\n   * @constructor\n   */\n  constructor(x, y) {\n    super();\n    if (x === true) {\n      // loads the model\n      this.slope = y.slope;\n      this.intercept = y.intercept;\n      this.coefficients = y.coefficients;\n    } else {\n      // creates the model\n      checkArrayLength(x, y);\n      theilSen(this, x, y);\n    }\n  }\n\n  toJSON() {\n    return {\n      name: 'TheilSenRegression',\n      slope: this.slope,\n      intercept: this.intercept\n    };\n  }\n\n  _predict(input) {\n    return this.slope * input + this.intercept;\n  }\n\n  computeX(input) {\n    return (input - this.intercept) / this.slope;\n  }\n\n  toString(precision) {\n    var result = 'f(x) = ';\n    if (this.slope) {\n      var xFactor = maybeToPrecision(this.slope, precision);\n      result += `${Math.abs(xFactor - 1) < 1e-5 ? '' : `${xFactor} * `}x`;\n      if (this.intercept) {\n        var absIntercept = Math.abs(this.intercept);\n        var operator = absIntercept === this.intercept ? '+' : '-';\n        result +=\n          ` ${operator} ${maybeToPrecision(absIntercept, precision)}`;\n      }\n    } else {\n      result += maybeToPrecision(this.intercept, precision);\n    }\n    return result;\n  }\n\n  toLaTeX(precision) {\n    return this.toString(precision);\n  }\n\n  static load(json) {\n    if (json.name !== 'TheilSenRegression') {\n      throw new TypeError('not a Theil-Sen model');\n    }\n    return new TheilSenRegression(true, json);\n  }\n}\n\nfunction theilSen(regression, x, y) {\n  let len = x.length;\n  let slopes = new Array(len * len);\n  let count = 0;\n  for (let i = 0; i < len; ++i) {\n    for (let j = i + 1; j < len; ++j) {\n      if (x[i] !== x[j]) {\n        slopes[count++] = (y[j] - y[i]) / (x[j] - x[i]);\n      }\n    }\n  }\n  slopes.length = count;\n  let medianSlope = median(slopes);\n\n  let cuts = new Array(len);\n  for (let i = 0; i < len; ++i) {\n    cuts[i] = y[i] - medianSlope * x[i];\n  }\n\n  regression.slope = medianSlope;\n  regression.intercept = median(cuts);\n  regression.coefficients = [regression.intercept, regression.slope];\n}\n","// randomColor by David Merfield under the CC0 license\n// https://github.com/davidmerfield/randomColor/\n\n;(function(root, factory) {\n\n  // Support CommonJS\n  if (typeof exports === 'object') {\n    var randomColor = factory();\n\n    // Support NodeJS & Component, which allow module.exports to be a function\n    if (typeof module === 'object' && module && module.exports) {\n      exports = module.exports = randomColor;\n    }\n\n    // Support CommonJS 1.1.1 spec\n    exports.randomColor = randomColor;\n\n  // Support AMD\n  } else if (typeof define === 'function' && define.amd) {\n    define([], factory);\n\n  // Support vanilla script loading\n  } else {\n    root.randomColor = factory();\n  }\n\n}(this, function() {\n\n  // Seed to get repeatable colors\n  var seed = null;\n\n  // Shared color dictionary\n  var colorDictionary = {};\n\n  // Populate the color dictionary\n  loadColorBounds();\n\n  // check if a range is taken\n  var colorRanges = [];\n\n  var randomColor = function (options) {\n\n    options = options || {};\n\n    // Check if there is a seed and ensure it's an\n    // integer. Otherwise, reset the seed value.\n    if (options.seed !== undefined && options.seed !== null && options.seed === parseInt(options.seed, 10)) {\n      seed = options.seed;\n\n    // A string was passed as a seed\n    } else if (typeof options.seed === 'string') {\n      seed = stringToInteger(options.seed);\n\n    // Something was passed as a seed but it wasn't an integer or string\n    } else if (options.seed !== undefined && options.seed !== null) {\n      throw new TypeError('The seed value must be an integer or string');\n\n    // No seed, reset the value outside.\n    } else {\n      seed = null;\n    }\n\n    var H,S,B;\n\n    // Check if we need to generate multiple colors\n    if (options.count !== null && options.count !== undefined) {\n\n      var totalColors = options.count,\n          colors = [];\n      // Value false at index i means the range i is not taken yet.\n      for (var i = 0; i < options.count; i++) {\n        colorRanges.push(false)\n        }\n      options.count = null;\n\n      while (totalColors > colors.length) {\n\n        var color = randomColor(options);\n\n        if (seed !== null) {\n          options.seed = seed;\n        }\n\n        colors.push(color);\n      }\n\n      options.count = totalColors;\n\n      return colors;\n    }\n\n    // First we pick a hue (H)\n    H = pickHue(options);\n\n    // Then use H to determine saturation (S)\n    S = pickSaturation(H, options);\n\n    // Then use S and H to determine brightness (B).\n    B = pickBrightness(H, S, options);\n\n    // Then we return the HSB color in the desired format\n    return setFormat([H,S,B], options);\n  };\n\n  function pickHue(options) {\n    if (colorRanges.length > 0) {\n      var hueRange = getRealHueRange(options.hue)\n\n      var hue = randomWithin(hueRange)\n\n      //Each of colorRanges.length ranges has a length equal approximatelly one step\n      var step = (hueRange[1] - hueRange[0]) / colorRanges.length\n\n      var j = parseInt((hue - hueRange[0]) / step)\n\n      //Check if the range j is taken\n      if (colorRanges[j] === true) {\n        j = (j + 2) % colorRanges.length\n      }\n      else {\n        colorRanges[j] = true\n           }\n\n      var min = (hueRange[0] + j * step) % 359,\n          max = (hueRange[0] + (j + 1) * step) % 359;\n\n      hueRange = [min, max]\n\n      hue = randomWithin(hueRange)\n\n      if (hue < 0) {hue = 360 + hue;}\n      return hue\n    }\n    else {\n      var hueRange = getHueRange(options.hue)\n\n      hue = randomWithin(hueRange);\n      // Instead of storing red as two seperate ranges,\n      // we group them, using negative numbers\n      if (hue < 0) {\n        hue = 360 + hue;\n      }\n\n      return hue;\n    }\n  }\n\n  function pickSaturation (hue, options) {\n\n    if (options.hue === 'monochrome') {\n      return 0;\n    }\n\n    if (options.luminosity === 'random') {\n      return randomWithin([0,100]);\n    }\n\n    var saturationRange = getSaturationRange(hue);\n\n    var sMin = saturationRange[0],\n        sMax = saturationRange[1];\n\n    switch (options.luminosity) {\n\n      case 'bright':\n        sMin = 55;\n        break;\n\n      case 'dark':\n        sMin = sMax - 10;\n        break;\n\n      case 'light':\n        sMax = 55;\n        break;\n   }\n\n    return randomWithin([sMin, sMax]);\n\n  }\n\n  function pickBrightness (H, S, options) {\n\n    var bMin = getMinimumBrightness(H, S),\n        bMax = 100;\n\n    switch (options.luminosity) {\n\n      case 'dark':\n        bMax = bMin + 20;\n        break;\n\n      case 'light':\n        bMin = (bMax + bMin)/2;\n        break;\n\n      case 'random':\n        bMin = 0;\n        bMax = 100;\n        break;\n    }\n\n    return randomWithin([bMin, bMax]);\n  }\n\n  function setFormat (hsv, options) {\n\n    switch (options.format) {\n\n      case 'hsvArray':\n        return hsv;\n\n      case 'hslArray':\n        return HSVtoHSL(hsv);\n\n      case 'hsl':\n        var hsl = HSVtoHSL(hsv);\n        return 'hsl('+hsl[0]+', '+hsl[1]+'%, '+hsl[2]+'%)';\n\n      case 'hsla':\n        var hslColor = HSVtoHSL(hsv);\n        var alpha = options.alpha || Math.random();\n        return 'hsla('+hslColor[0]+', '+hslColor[1]+'%, '+hslColor[2]+'%, ' + alpha + ')';\n\n      case 'rgbArray':\n        return HSVtoRGB(hsv);\n\n      case 'rgb':\n        var rgb = HSVtoRGB(hsv);\n        return 'rgb(' + rgb.join(', ') + ')';\n\n      case 'rgba':\n        var rgbColor = HSVtoRGB(hsv);\n        var alpha = options.alpha || Math.random();\n        return 'rgba(' + rgbColor.join(', ') + ', ' + alpha + ')';\n\n      default:\n        return HSVtoHex(hsv);\n    }\n\n  }\n\n  function getMinimumBrightness(H, S) {\n\n    var lowerBounds = getColorInfo(H).lowerBounds;\n\n    for (var i = 0; i < lowerBounds.length - 1; i++) {\n\n      var s1 = lowerBounds[i][0],\n          v1 = lowerBounds[i][1];\n\n      var s2 = lowerBounds[i+1][0],\n          v2 = lowerBounds[i+1][1];\n\n      if (S >= s1 && S <= s2) {\n\n         var m = (v2 - v1)/(s2 - s1),\n             b = v1 - m*s1;\n\n         return m*S + b;\n      }\n\n    }\n\n    return 0;\n  }\n\n  function getHueRange (colorInput) {\n\n    if (typeof parseInt(colorInput) === 'number') {\n\n      var number = parseInt(colorInput);\n\n      if (number < 360 && number > 0) {\n        return [number, number];\n      }\n\n    }\n\n    if (typeof colorInput === 'string') {\n\n      if (colorDictionary[colorInput]) {\n        var color = colorDictionary[colorInput];\n        if (color.hueRange) {return color.hueRange;}\n      } else if (colorInput.match(/^#?([0-9A-F]{3}|[0-9A-F]{6})$/i)) {\n        var hue = HexToHSB(colorInput)[0];\n        return [ hue, hue ];\n      }\n    }\n\n    return [0,360];\n\n  }\n\n  function getSaturationRange (hue) {\n    return getColorInfo(hue).saturationRange;\n  }\n\n  function getColorInfo (hue) {\n\n    // Maps red colors to make picking hue easier\n    if (hue >= 334 && hue <= 360) {\n      hue-= 360;\n    }\n\n    for (var colorName in colorDictionary) {\n       var color = colorDictionary[colorName];\n       if (color.hueRange &&\n           hue >= color.hueRange[0] &&\n           hue <= color.hueRange[1]) {\n          return colorDictionary[colorName];\n       }\n    } return 'Color not found';\n  }\n\n  function randomWithin (range) {\n    if (seed === null) {\n      //generate random evenly destinct number from : https://martin.ankerl.com/2009/12/09/how-to-create-random-colors-programmatically/\n      var golden_ratio = 0.618033988749895\n      var r=Math.random()\n      r += golden_ratio\n      r %= 1\n      return Math.floor(range[0] + r*(range[1] + 1 - range[0]));\n    } else {\n      //Seeded random algorithm from http://indiegamr.com/generate-repeatable-random-numbers-in-js/\n      var max = range[1] || 1;\n      var min = range[0] || 0;\n      seed = (seed * 9301 + 49297) % 233280;\n      var rnd = seed / 233280.0;\n      return Math.floor(min + rnd * (max - min));\n}\n  }\n\n  function HSVtoHex (hsv){\n\n    var rgb = HSVtoRGB(hsv);\n\n    function componentToHex(c) {\n        var hex = c.toString(16);\n        return hex.length == 1 ? '0' + hex : hex;\n    }\n\n    var hex = '#' + componentToHex(rgb[0]) + componentToHex(rgb[1]) + componentToHex(rgb[2]);\n\n    return hex;\n\n  }\n\n  function defineColor (name, hueRange, lowerBounds) {\n\n    var sMin = lowerBounds[0][0],\n        sMax = lowerBounds[lowerBounds.length - 1][0],\n\n        bMin = lowerBounds[lowerBounds.length - 1][1],\n        bMax = lowerBounds[0][1];\n\n    colorDictionary[name] = {\n      hueRange: hueRange,\n      lowerBounds: lowerBounds,\n      saturationRange: [sMin, sMax],\n      brightnessRange: [bMin, bMax]\n    };\n\n  }\n\n  function loadColorBounds () {\n\n    defineColor(\n      'monochrome',\n      null,\n      [[0,0],[100,0]]\n    );\n\n    defineColor(\n      'red',\n      [-26,18],\n      [[20,100],[30,92],[40,89],[50,85],[60,78],[70,70],[80,60],[90,55],[100,50]]\n    );\n\n    defineColor(\n      'orange',\n      [18,46],\n      [[20,100],[30,93],[40,88],[50,86],[60,85],[70,70],[100,70]]\n    );\n\n    defineColor(\n      'yellow',\n      [46,62],\n      [[25,100],[40,94],[50,89],[60,86],[70,84],[80,82],[90,80],[100,75]]\n    );\n\n    defineColor(\n      'green',\n      [62,178],\n      [[30,100],[40,90],[50,85],[60,81],[70,74],[80,64],[90,50],[100,40]]\n    );\n\n    defineColor(\n      'blue',\n      [178, 257],\n      [[20,100],[30,86],[40,80],[50,74],[60,60],[70,52],[80,44],[90,39],[100,35]]\n    );\n\n    defineColor(\n      'purple',\n      [257, 282],\n      [[20,100],[30,87],[40,79],[50,70],[60,65],[70,59],[80,52],[90,45],[100,42]]\n    );\n\n    defineColor(\n      'pink',\n      [282, 334],\n      [[20,100],[30,90],[40,86],[60,84],[80,80],[90,75],[100,73]]\n    );\n\n  }\n\n  function HSVtoRGB (hsv) {\n\n    // this doesn't work for the values of 0 and 360\n    // here's the hacky fix\n    var h = hsv[0];\n    if (h === 0) {h = 1;}\n    if (h === 360) {h = 359;}\n\n    // Rebase the h,s,v values\n    h = h/360;\n    var s = hsv[1]/100,\n        v = hsv[2]/100;\n\n    var h_i = Math.floor(h*6),\n      f = h * 6 - h_i,\n      p = v * (1 - s),\n      q = v * (1 - f*s),\n      t = v * (1 - (1 - f)*s),\n      r = 256,\n      g = 256,\n      b = 256;\n\n    switch(h_i) {\n      case 0: r = v; g = t; b = p;  break;\n      case 1: r = q; g = v; b = p;  break;\n      case 2: r = p; g = v; b = t;  break;\n      case 3: r = p; g = q; b = v;  break;\n      case 4: r = t; g = p; b = v;  break;\n      case 5: r = v; g = p; b = q;  break;\n    }\n\n    var result = [Math.floor(r*255), Math.floor(g*255), Math.floor(b*255)];\n    return result;\n  }\n\n  function HexToHSB (hex) {\n    hex = hex.replace(/^#/, '');\n    hex = hex.length === 3 ? hex.replace(/(.)/g, '$1$1') : hex;\n\n    var red = parseInt(hex.substr(0, 2), 16) / 255,\n          green = parseInt(hex.substr(2, 2), 16) / 255,\n          blue = parseInt(hex.substr(4, 2), 16) / 255;\n\n    var cMax = Math.max(red, green, blue),\n          delta = cMax - Math.min(red, green, blue),\n          saturation = cMax ? (delta / cMax) : 0;\n\n    switch (cMax) {\n      case red: return [ 60 * (((green - blue) / delta) % 6) || 0, saturation, cMax ];\n      case green: return [ 60 * (((blue - red) / delta) + 2) || 0, saturation, cMax ];\n      case blue: return [ 60 * (((red - green) / delta) + 4) || 0, saturation, cMax ];\n    }\n  }\n\n  function HSVtoHSL (hsv) {\n    var h = hsv[0],\n      s = hsv[1]/100,\n      v = hsv[2]/100,\n      k = (2-s)*v;\n\n    return [\n      h,\n      Math.round(s*v / (k<1 ? k : 2-k) * 10000) / 100,\n      k/2 * 100\n    ];\n  }\n\n  function stringToInteger (string) {\n    var total = 0\n    for (var i = 0; i !== string.length; i++) {\n      if (total >= Number.MAX_SAFE_INTEGER) break;\n      total += string.charCodeAt(i)\n    }\n    return total\n  }\n\n  // get The range of given hue when options.count!=0\n  function getRealHueRange(colorHue)\n  { if (!isNaN(colorHue)) {\n    var number = parseInt(colorHue);\n\n    if (number < 360 && number > 0) {\n      return getColorInfo(colorHue).hueRange\n    }\n  }\n    else if (typeof colorHue === 'string') {\n\n      if (colorDictionary[colorHue]) {\n        var color = colorDictionary[colorHue];\n\n        if (color.hueRange) {\n          return color.hueRange\n       }\n    } else if (colorHue.match(/^#?([0-9A-F]{3}|[0-9A-F]{6})$/i)) {\n        var hue = HexToHSB(colorHue)[0]\n        return getColorInfo(hue).hueRange\n    }\n  }\n\n    return [0,360]\n}\n  return randomColor;\n}));\n","\"use strict\";\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nvar stylesInDom = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDom.length; i++) {\n    if (stylesInDom[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var index = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3]\n    };\n\n    if (index !== -1) {\n      stylesInDom[index].references++;\n      stylesInDom[index].updater(obj);\n    } else {\n      stylesInDom.push({\n        identifier: identifier,\n        updater: addStyle(obj, options),\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n  var attributes = options.attributes || {};\n\n  if (typeof attributes.nonce === 'undefined') {\n    var nonce = typeof __webpack_nonce__ !== 'undefined' ? __webpack_nonce__ : null;\n\n    if (nonce) {\n      attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(attributes).forEach(function (key) {\n    style.setAttribute(key, attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.media ? \"@media \".concat(obj.media, \" {\").concat(obj.css, \"}\") : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  } else {\n    style.removeAttribute('media');\n  }\n\n  if (sourceMap && btoa) {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    if (Object.prototype.toString.call(newList) !== '[object Array]') {\n      return;\n    }\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDom[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDom[_index].references === 0) {\n        stylesInDom[_index].updater();\n\n        stylesInDom.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","var api = require(\"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../node_modules/css-loader/dist/cjs.js??ref--8-1!../node_modules/postcss-loader/src/index.js??ref--8-2!../node_modules/sass-loader/dist/cjs.js!./ScatterPanel.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\nvar exported = content.locals ? content.locals : {};\n\n\n\nmodule.exports = exported;","import React from 'react';\r\nimport { PanelProps } from '@grafana/data';\r\nimport $ from 'jquery';\r\nimport * as d3 from 'd3';\r\nimport SimpleLinearRegression from 'ml-regression-simple-linear';\r\nimport ExponentialRegression from 'ml-regression-exponential';\r\nimport PolynomialRegression from 'ml-regression-polynomial';\r\nimport PowerRegression from 'ml-regression-power';\r\nimport TheilSenRegression from 'ml-regression-theil-sen';\r\nimport { ScatterOptions } from 'types/ScatterOptions';\r\nimport { ColData } from 'types/ColData';\r\nimport { MarginPair } from 'types/MarginPair';\r\nimport { XAxis } from 'types/XAxis';\r\nimport { FieldSet } from 'types/FieldSet';\r\nimport { Title } from 'types/Title';\r\nimport './ScatterPanel.css';\r\n\r\nconst randomColor = require('randomcolor');\r\n\r\ninterface Props extends PanelProps<ScatterOptions> { }\r\n\r\nfunction autoConfigure(options: ScatterOptions, colData: ColData[]) {\r\n  if (options.xAxis.col === -1 || options.xAxis.col >= colData.length) {\r\n    options.xAxis = new XAxis(0, false);\r\n  }\r\n\r\n  if (options.xAxisTitle.text.length === 0) {\r\n    options.xAxisTitle = new Title(colData[0].displayName, 'white', 2);\r\n  }\r\n\r\n  options.fieldSets = options.fieldSets.filter((f) => f.col >= 0 && f.col < colData.length && f.col !== options.xAxis.col);\r\n\r\n  if (options.fieldSets.length === 0) {\r\n    const fieldSets = colData.map((f, i) => new FieldSet(i, -1, randomColor(), 3, 1, 'none', 3, false));\r\n\r\n    options.fieldSets = fieldSets.filter((c) => c.col !== options.xAxis.col);\r\n  }\r\n\r\n  options.xMargins.lower = 30;\r\n  options.xMargins.upper = 10;\r\n  options.yMargins.lower = 20;\r\n  options.yMargins.upper = 20;\r\n}\r\n\r\nfunction drawLines(\r\n  options: ScatterOptions,\r\n  fieldSets: FieldSet[],\r\n  xValues: number[],\r\n  yValues: number[][],\r\n  xScale: Function,\r\n  yScale: Function,\r\n  xExtent: number[],\r\n  yExtent: number[],\r\n) {\r\n  const lines = new Array(0);// as JSX.Element[];\r\n\r\n  fieldSets.forEach((fieldSet, index) => {\r\n    if (fieldSet.lineType !== 'none' && fieldSet.lineSize > 0) {\r\n      let path = '';\r\n\r\n      let xyData = xValues.map((d, i) => [d, yValues[index][i]]).filter((xy) => xy[1] != null);\r\n      if (fieldSet.lineType === 'simple') {\r\n        path = `\r\n        ${xyData.map((xy, i) => `${i === 0 ? 'M' : 'L'} ${xScale(xy[0])} ${yScale(xy[1])}`).join(' ')}\r\n      `;\r\n      } else if (fieldSet.lineType === 'linear') {\r\n        const x = xyData.map((xy) => xy[0]);\r\n        const y = xyData.map((xy) => xy[1]);\r\n\r\n        const SLR = new SimpleLinearRegression(x, y);\r\n        // check for start and end points inside the plotted area\r\n        let x0 = xExtent[0];\r\n        let y0 = SLR.predict(x0);\r\n        if (y0 < yExtent[0]) {\r\n          y0 = yExtent[0];\r\n          x0 = SLR.computeX(y0);\r\n        }\r\n        if (y0 > yExtent[1]) {\r\n          y0 = yExtent[1];\r\n          x0 = SLR.computeX(y0);\r\n        }\r\n\r\n        let x1 = xExtent[1];\r\n        let y1 = SLR.predict(x1);\r\n        if (y1 < yExtent[0]) {\r\n          y1 = yExtent[0];\r\n          x1 = SLR.computeX(y1);\r\n        }\r\n        if (y1 > yExtent[1]) {\r\n          y1 = yExtent[1];\r\n          x1 = SLR.computeX(y1);\r\n        }\r\n\r\n        path = `M ${xScale(x0)} ${yScale(y0)} L ${xScale(x1)} ${yScale(y1)}`;\r\n      } else if (fieldSet.lineType === 'exponential') {\r\n        const ex = xyData.map((xy) => xy[0]);\r\n        const ey = xyData.map((xy) => xy[1]);\r\n        const ER = new ExponentialRegression(ex, ey);\r\n\r\n        const x0 = xExtent[0];\r\n        const x1 = xExtent[1];\r\n\r\n        const steps = 100;\r\n        const dx = (x1 - x0) / (steps - 1);\r\n        const xys = new Array(0);\r\n        for (let i = 0; i < steps; i++) {\r\n          const x = x0 + i * dx;\r\n          const y = ER.predict(x);\r\n          xys.push([x, y]);\r\n        }\r\n        path = `\r\n        ${xys.map((d, i) => `${i === 0 ? 'M' : 'L'} ${xScale(d[0])} ${yScale(d[1])}`).join(' ')}\r\n      `;\r\n      } else if (fieldSet.lineType === 'power') {\r\n        xyData = xyData.filter((d) => d[0] > 0);\r\n        const px = xyData.map((xy) => xy[0]);\r\n        const py = xyData.map((xy) => xy[1]);\r\n        const PR = new PowerRegression(px, py);\r\n\r\n        const x0 = xExtent[0];\r\n        const x1 = xExtent[1];\r\n\r\n        const steps = 100;\r\n        const dx = (x1 - x0) / (steps - 1);\r\n        const xys = new Array(0);\r\n        for (let i = 0; i < steps; i++) {\r\n          const x = x0 + i * dx;\r\n          const y = PR.predict(x);\r\n          xys.push([x, y]);\r\n        }\r\n        path = `\r\n      ${xys.map((d, i) => `${i === 0 ? 'M' : 'L'} ${xScale(d[0])} ${yScale(d[1])}`).join(' ')}\r\n      `;\r\n      } else if (fieldSet.lineType === 'polynomial') {\r\n        xyData = xyData.filter((d) => d[0] > 0);\r\n        const pnx = xyData.map((xy) => xy[0]);\r\n        const pny = xyData.map((xy) => xy[1]);\r\n        const PN = new PolynomialRegression(pnx, pny, fieldSet.polynomialOrder ?? 3);\r\n\r\n        const x0 = xExtent[0];\r\n        const x1 = xExtent[1];\r\n\r\n        const steps = 100;\r\n        const dx = (x1 - x0) / (steps - 1);\r\n        const xys = new Array(0);\r\n        for (let i = 0; i < steps; i++) {\r\n          const x = x0 + i * dx;\r\n          const y = PN.predict(x);\r\n          xys.push([x, y]);\r\n        }\r\n        path = `\r\n    ${xys.map((d, i) => `${i === 0 ? 'M' : 'L'} ${xScale(d[0])} ${yScale(d[1])}`).join(' ')}\r\n    `;\r\n      } else if (fieldSet.lineType === 'theilsen') {\r\n        xyData = xyData.filter((d) => d[0] > 0);\r\n        const tx = xyData.map((xy) => xy[0]);\r\n        const ty = xyData.map((xy) => xy[1]);\r\n        const TS = new TheilSenRegression(tx, ty);\r\n\r\n        const x0 = xExtent[0];\r\n        const x1 = xExtent[1];\r\n\r\n        const steps = 100;\r\n        const dx = (x1 - x0) / (steps - 1);\r\n        const xys = new Array(0);\r\n        for (let i = 0; i < steps; i++) {\r\n          const x = x0 + i * dx;\r\n          const y = TS.predict(x);\r\n          xys.push([x, y]);\r\n        }\r\n        path = `\r\n      ${xys.map((d, i) => `${i === 0 ? 'M' : 'L'} ${xScale(d[0])} ${yScale(d[1])}`).join(' ')}\r\n      `;\r\n      }\r\n\r\n      if (path.length) {\r\n        let className = `ScatterLine ScatterLine-${index}`;\r\n        if (options.legend.size && fieldSet.hidden) {\r\n          className += ' ScatterLineHidden';\r\n        }\r\n\r\n        lines.push(\r\n          <path\r\n            key={`line-[${index}]`}\r\n            className={className}\r\n            d={path}\r\n            stroke={fieldSet.color}\r\n            strokeWidth={fieldSet.lineSize}\r\n            fill=\"none\"\r\n          />,\r\n        );\r\n      }\r\n    }\r\n  });\r\n\r\n  return lines;\r\n}\r\n\r\nfunction drawDots(options: ScatterOptions,\r\n  fieldSets: FieldSet[],\r\n  xValues: number[],\r\n  yValues: number[][],\r\n  colValues: number[][],\r\n  xScale: Function,\r\n  yScale: Function) {\r\n  return fieldSets.map((y, i: number) => (\r\n    xValues.map((x, j) => {\r\n      const dotSize = y.sizeCol >= 0 ? colValues[y.sizeCol][j] : -y.sizeCol;\r\n\r\n      const yValue = yValues[i][j];\r\n\r\n      if (dotSize > 0 && yValue != null) {\r\n        let className = `ScatterSet-${i}`;\r\n        if (options.legend.size && y.hidden) {\r\n          className += ' ScatterSetHidden';\r\n        }\r\n\r\n        return (\r\n          <circle\r\n            key={`circle-[${y}][${i}]`}\r\n            cx={xScale(x)}\r\n            cy={yScale(yValue)}\r\n            r={dotSize}\r\n            className={className}\r\n            fill={y.color}\r\n          />\r\n        );\r\n      }\r\n      return <div key={`circle-[${y}][${i}]`} />;\r\n    })\r\n  ));\r\n}\r\n\r\nfunction drawLabels(options: ScatterOptions,\r\n  labels: string[],\r\n  xValues: number[],\r\n  xScale: Function) {\r\n  return xValues.map((x, i: number) => {\r\n    if (Array.isArray(labels) && i < labels.length) {\r\n      return (\r\n        <text\r\n          key={`label-[${i}]`}\r\n          x={xScale(x)}\r\n          alignmentBaseline=\"hanging\"\r\n          textAnchor=\"middle\"\r\n          fill={options.label.color}\r\n          fontSize={options.label.textSize * 4}\r\n          fontWeight=\"100\"\r\n        >\r\n          {labels[i]}\r\n        </text>\r\n      );\r\n    }\r\n    return null;\r\n  });\r\n}\r\n\r\nfunction applySetFieldSetHidden(\r\n  fieldSet: FieldSet,\r\n  index: number,\r\n  hidden: boolean,\r\n  panelId: number,\r\n) {\r\n  fieldSet.hidden = hidden;\r\n\r\n  const panelGroup = $(`.ScatterPanel-${panelId}`);\r\n  const markers = $(`.ScatterSet-${index}`, panelGroup);\r\n  if (hidden) { markers.addClass('ScatterSetHidden'); } else { markers.removeClass('ScatterSetHidden'); }\r\n\r\n  const lines = $(`.ScatterLine-${index}`, panelGroup);\r\n  if (hidden) { lines.addClass('ScatterLineHidden'); } else { lines.removeClass('ScatterLineHidden'); }\r\n}\r\n\r\nfunction onLegendClick(e: React.MouseEvent, index: number, fieldSets: FieldSet[], panelId: number) {\r\n  const thisLegendTextElement = $(e.currentTarget);\r\n  const legendGroup = thisLegendTextElement.parent();\r\n  const legendTextElements = $('.ScatterLegendText', legendGroup);\r\n\r\n  const hiddenLegendTextElements = legendTextElements.filter('.ScatterLegendTextHidden');\r\n\r\n  if (e.ctrlKey) {\r\n    // toggle the state of the current item\r\n    thisLegendTextElement.toggleClass('ScatterLegendTextHidden');\r\n    applySetFieldSetHidden(fieldSets[index], index, !fieldSets[index].hidden, panelId);\r\n  } else if (hiddenLegendTextElements.length === 0) {\r\n    // if none are hidden, hide everything else\r\n    legendTextElements.addClass('ScatterLegendTextHidden');\r\n    thisLegendTextElement.toggleClass('ScatterLegendTextHidden');\r\n    fieldSets.forEach((f, i) => { applySetFieldSetHidden(f, i, index !== i, panelId); });\r\n  } else if (!thisLegendTextElement.hasClass('ScatterLegendTextHidden')) {\r\n    // if this item is visible, unhide everything\r\n    legendTextElements.removeClass('ScatterLegendTextHidden');\r\n    fieldSets.forEach((f, i) => { applySetFieldSetHidden(f, i, false, panelId); });\r\n  } else {\r\n    // hide everything but this one\r\n    legendTextElements.addClass('ScatterLegendTextHidden');\r\n    thisLegendTextElement.toggleClass('ScatterLegendTextHidden');\r\n    fieldSets.forEach((f, i) => { applySetFieldSetHidden(f, i, index !== i, panelId); });\r\n  }\r\n}\r\n\r\nfunction drawLegend(options: ScatterOptions, width: number, height: number, xMargins: MarginPair, yMargins: MarginPair, colNames: string[], panelId: number) {\r\n  if (options.legend.size) {\r\n    const scale = options.legend.size / 3;\r\n    const fieldSets = options.fieldSets.filter((x: FieldSet) => x.col >= 0 && x.col < colNames.length);\r\n\r\n    const maxLength = d3.max(fieldSets.map((f) => colNames[f.col].length)) as number;\r\n\r\n    if (fieldSets.length > 0) {\r\n      const offset = 20;\r\n      const dx = offset + (8.6 * scale * maxLength);\r\n\r\n      xMargins.upper += dx;\r\n\r\n      const legends = new Array(0);\r\n\r\n      fieldSets.forEach((f, i) => {\r\n        const className = f.hidden ? 'ScatterLegendText ScatterLegendTextHidden' : 'ScatterLegendText';\r\n        legends.push(\r\n          <text\r\n            transform={`translate(${offset}, ${30 * scale * i}) scale(${scale})`}\r\n            className={className}\r\n            alignmentBaseline=\"hanging\"\r\n            textAnchor=\"left\"\r\n            fill={f.color}\r\n            onClick={(e) => {\r\n              onLegendClick(e, i, fieldSets, panelId);\r\n            }}\r\n          >\r\n            {colNames[f.col]}\r\n          </text>,\r\n        );\r\n      });\r\n\r\n      return (\r\n        <g id=\"legend\" transform={`translate(${width - dx}, ${yMargins.upper})`}>\r\n          {legends}\r\n        </g>\r\n      );\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction drawXTitle(options: ScatterOptions, width: number, height: number, xMargins: MarginPair, yMargins: MarginPair) {\r\n  const title = options.xAxisTitle;\r\n  if (title.text) {\r\n    const scale = title.textSize;\r\n    const dx = 8.2 * scale * title.text.length;\r\n    const dy = 14;\r\n\r\n    yMargins.lower += dy * scale;\r\n\r\n    return (\r\n      <g\r\n        id=\"XTitle\"\r\n        transform={`translate(${(width + xMargins.lower - xMargins.upper) / 2.0}, ${height - dy * scale}) scale(${scale})`}\r\n      >\r\n        <text\r\n          className=\"ScatterXTitleRect\"\r\n          alignmentBaseline=\"hanging\"\r\n          textAnchor=\"middle\"\r\n          width={dx}\r\n          height={dy}\r\n          fill={title.color}\r\n        >\r\n          {title.text}\r\n        </text>\r\n      </g>\r\n    );\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction drawYTitle(options: ScatterOptions, width: number, height: number, xMargins: MarginPair, yMargins: MarginPair) {\r\n  const title = options.yAxisTitle;\r\n  if (title.text) {\r\n    const scale = title.textSize;\r\n    const dx = 8.2 * title.text.length;\r\n    const dy = 14;\r\n\r\n    if (options.rotateYAxisTitle) {\r\n      xMargins.lower += dy * scale;\r\n\r\n      return (\r\n        <g\r\n          id=\"YTitle\"\r\n          transform={`translate(0, ${(height - yMargins.upper - yMargins.lower) / 2.0}) rotate(-90) scale(${scale})`}\r\n        >\r\n          <text\r\n            className=\"ScatterYTitleRect\"\r\n            alignmentBaseline=\"hanging\"\r\n            textAnchor=\"middle\"\r\n            width={dx}\r\n            height={dy}\r\n            fill={title.color}\r\n          >\r\n            {title.text}\r\n          </text>\r\n        </g>\r\n      );\r\n    }\r\n    xMargins.lower += dx * scale;\r\n\r\n    return (\r\n      <g\r\n        id=\"YTitle\"\r\n        transform={`translate(0, ${(height - yMargins.upper - yMargins.lower) / 2.0}) scale(${scale})`}\r\n      >\r\n        <text\r\n          className=\"ScatterYTitleRect\"\r\n          textAnchor=\"left\"\r\n          width={dx}\r\n          height={dy}\r\n          fill={title.color}\r\n        >\r\n          {title.text}\r\n        </text>\r\n      </g>\r\n    );\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction isXAxisLabelValid(\r\n  options: ScatterOptions,\r\n  colData: {\r\n    name: string,\r\n    displayName: string,\r\n    type: string,\r\n    values: any[]\r\n  }[],\r\n) {\r\n  return options.label.col >= 0 && colData[options.label.col].type === 'string';\r\n}\r\n\r\nfunction generateContent(\r\n  options: ScatterOptions,\r\n  width: number,\r\n  height: number,\r\n  fieldSets: FieldSet[],\r\n  colData: {\r\n    name: string,\r\n    displayName: string,\r\n    type: string,\r\n    values: any[]\r\n  }[],\r\n  panelId: number,\r\n) {\r\n  //  const visibleFieldSets = fieldSets;\r\n\r\n  const colValues = colData.map((c) => c.values);\r\n  const colNames = colData.map((c) => c.displayName || c.name);\r\n  const xValues = colData[options.xAxis.col].type !== 'string' ? colValues[options.xAxis.col] : Array.from(colValues[0], (x, i) => i);\r\n  const xExtent = [\r\n    options.xAxisExtents.min === 0 ? 0 : options.xAxisExtents.min || d3.min(xValues),\r\n    options.xAxisExtents.max === 0 ? 0 : options.xAxisExtents.max || d3.max(xValues),\r\n  ] as number[];\r\n\r\n  const yValues = fieldSets.map((f) => colValues[f.col]);\r\n  const yExtents = yValues.map((c) => d3.extent(c));\r\n  const yExtent = [\r\n    options.yAxisExtents.min === 0 ? 0 : options.yAxisExtents.min\r\n      || d3.min(yExtents.map((c) => c[0]) as number[]),\r\n    options.yAxisExtents.max === 0 ? 0 : options.yAxisExtents.max\r\n      || d3.max(yExtents.map((c) => c[1]) as number[]),\r\n  ] as number[];\r\n\r\n  const labels = isXAxisLabelValid(options, colData) ? colValues[options.label.col] : [];\r\n  const xMargins = new MarginPair(options.xMargins.lower || 0, options.xMargins.upper || 0);\r\n  const yMargins = new MarginPair(options.yMargins.lower || 0, options.yMargins.upper || 0);\r\n  const legend = drawLegend(options, width, height, xMargins, yMargins, colNames, panelId);\r\n  const yTitle = drawYTitle(options, width, height, xMargins, yMargins);\r\n  const xTitle = drawXTitle(options, width, height, xMargins, yMargins);\r\n\r\n  const border = options.border.size > 0 ? (\r\n    <rect\r\n      id=\"border\"\r\n      transform={`translate(${xMargins.lower}, ${yMargins.upper})`}\r\n      width={width - xMargins.lower - xMargins.upper}\r\n      height={height - yMargins.upper - yMargins.lower}\r\n      stroke={options.border.color}\r\n      strokeWidth={options.border.size}\r\n      fill=\"none\"\r\n    />\r\n  ) : null;\r\n\r\n  const clippath = (\r\n    <defs>\r\n      <clipPath id={`grid-${panelId}.${width}`}>\r\n        <rect\r\n          transform={`translate(${xMargins.lower}, ${yMargins.upper})`}\r\n          width={width - xMargins.lower - xMargins.upper}\r\n          height={height - yMargins.upper - yMargins.lower}\r\n        />\r\n      </clipPath>\r\n    </defs>\r\n  );\r\n\r\n  const xScale = d3\r\n    .scaleLinear()\r\n    .nice()\r\n    .domain(xExtent as [number, number])\r\n    .range([\r\n      options.xAxis.inverted ? (width - xMargins.upper) : xMargins.lower,\r\n      options.xAxis.inverted ? xMargins.lower : (width - xMargins.upper),\r\n    ]);\r\n\r\n  let xAxis = d3.axisBottom(xScale);\r\n\r\n  if (labels.length > 0) xAxis = xAxis.ticks(0);\r\n  else xAxis = xAxis.tickSize(yMargins.upper + yMargins.lower - height);\r\n\r\n  const yScale = d3\r\n    .scaleLinear()\r\n    .nice()\r\n    .domain(yExtent as [number, number])\r\n    .range([height - yMargins.lower, yMargins.upper]);\r\n\r\n  const yAxis = d3.axisLeft(yScale).tickSize(xMargins.lower + xMargins.upper - width);\r\n\r\n  return (\r\n    <svg\r\n      width={width}\r\n      height={height}\r\n    >\r\n      <g className={`ScatterPanel-${panelId}`}>\r\n        {legend}\r\n        {xTitle}\r\n        {yTitle}\r\n        <g\r\n          id=\"YGrid\"\r\n          transform={`translate(0, ${height - yMargins.lower})`}\r\n          ref={(node) => {\r\n            d3.select(node)\r\n              .call(xAxis as any)\r\n              .selectAll('line')\r\n              .attr('stroke', options.grid.color);\r\n          }}\r\n        />\r\n        <g\r\n          id=\"HGrid\"\r\n          transform={`translate(${xMargins.lower}, 0)`}\r\n          ref={(node) => {\r\n            d3.select(node)\r\n              .call(yAxis as any)\r\n              .selectAll('line')\r\n              .attr('stroke', options.grid.color);\r\n          }}\r\n        />\r\n        {clippath}\r\n        {border}\r\n        <g id=\"lines\" clipPath={`url(#grid-${panelId}.${width})`}>\r\n          {drawLines(options, fieldSets, xValues, yValues, xScale, yScale, xExtent, yExtent)}\r\n        </g>\r\n        <g id=\"dots\">\r\n          {drawDots(options, fieldSets, xValues, yValues, colValues, xScale, yScale)}\r\n        </g>\r\n        <g\r\n          id=\"labels\"\r\n          transform={`translate(0, ${height - yMargins.lower + options.label.textSize + 3})`}\r\n        >\r\n          {drawLabels(options, labels, xValues, xScale)}\r\n        </g>\r\n      </g>\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport const ScatterPanel: React.FC<Props> = ({\r\n  options, data, width, height,\r\n}) => {\r\n  if (data.series?.length > 0) {\r\n    const frame = data.series[0];\r\n\r\n    const panelId = data.request?.panelId as number;\r\n\r\n    const colData = new Array(0);\r\n    frame.fields.forEach((field) => {\r\n      colData.push(new ColData(\r\n        field.name,\r\n        field.config?.displayName || field.name,\r\n        field.type,\r\n        field.values.toArray().map((v) => v as number),\r\n      ));\r\n    });\r\n\r\n    if (colData.length < 2) {\r\n      return (\r\n        <div style={{ overflow: 'hidden', height: '100%' }}>\r\n          <p>To get started, create a table query that returns 2 or more numeric columns</p>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (options.xAxis.col === -1 || options.fieldSets.length === 0) {\r\n      // Nothing has been setup - call auto-config\r\n      autoConfigure(options, colData);\r\n    }\r\n\r\n    if (options.xAxis.col >= colData.length) {\r\n      return (\r\n        <div style={{ overflow: 'hidden', height: '100%' }}>\r\n          <p>X Axis field setting not found in current query</p>\r\n        </div>\r\n      );\r\n    }\r\n    const fieldSets = options.fieldSets.filter((x) => x != null && x?.col >= 0 && x?.col < colData.length);\r\n    if (fieldSets.length === 0) {\r\n      return (\r\n        <div style={{ overflow: 'hidden', height: '100%' }}>\r\n          <p>No Y Axis(s) data found in current query</p>\r\n        </div>\r\n      );\r\n    }\r\n    return generateContent(options, width, height, fieldSets, colData, panelId);\r\n  }\r\n\r\n  return (\r\n    <div style={{ overflow: 'hidden', height: '100%' }}>\r\n      <p>No data</p>\r\n      <p>To get started, create a table query that returns 2 or more numeric columns</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { StandardEditorProps } from '@grafana/data';\r\nimport { ColorPicker, Input } from '@grafana/ui';\r\nimport { Border } from '../types/Border';\r\n\r\ninterface Props extends StandardEditorProps<Border> { }\r\n\r\nexport const BorderEditor: React.FC<Props> = ({ value, onChange }) => {\r\n  const color = value.size > 0 ?\r\n    (\r\n      <div className=\"ScatterDotColor\">\r\n        <ColorPicker\r\n          color={value.color}\r\n          enableNamedColors={false}\r\n          onChange={(e: string) => {\r\n            value.color = e;\r\n            onChange(value);\r\n          }}\r\n        />\r\n      </div>\r\n    )\r\n    : null;\r\n\r\n  return (\r\n    <div className=\"ScatterFlex\">\r\n      <div className=\"ScatterFlex ScatterSize\">\r\n        <div className=\"ScatterLabel\">Size</div>\r\n        <Input\r\n          type=\"number\"\r\n          min={0}\r\n          max={10}\r\n          title=\"Border Line width\"\r\n          value={value.size}\r\n          onChange={(e) => {\r\n            value.size = (e.target as HTMLInputElement).valueAsNumber;\r\n            onChange(value);\r\n          }}\r\n        />\r\n      </div>\r\n      {color}\r\n    </div>\r\n  );\r\n};\r\n","import * as React from 'react';\r\nimport { StandardEditorProps } from '@grafana/data';\r\nimport { Input } from '@grafana/ui';\r\nimport { Extents } from '../types/Extents';\r\n\r\ninterface Props extends StandardEditorProps<Extents> { }\r\n\r\nexport const ExtentsEditor: React.FC<Props> = ({ value, onChange }) => (\r\n  <div className=\"ScatterExtents\">\r\n    <div className=\"ScatterExtentLimit\">\r\n      <Input\r\n        type=\"number\"\r\n        value={value.min}\r\n        title=\"Axis Min (leave blank for auto)\"\r\n        onChange={(e) => {\r\n          value.min = (e.target as HTMLInputElement).valueAsNumber;\r\n          onChange(value);\r\n        }}\r\n      />\r\n    </div>\r\n    <div className=\"ScatterExtentLimit\">\r\n      <Input\r\n        className=\"ScatterExtentLimit\"\r\n        type=\"number\"\r\n        value={value.max}\r\n        title=\"Axis Max (leave blank for auto)\"\r\n        onChange={(e) => {\r\n          value.max = (e.target as HTMLInputElement).valueAsNumber;\r\n          onChange(value);\r\n        }}\r\n      />\r\n    </div>\r\n  </div>\r\n);\r\n","import React from 'react';\r\nimport { StandardEditorProps } from '@grafana/data';\r\nimport {\r\n  Button, ColorPicker, Input, Select,\r\n} from '@grafana/ui';\r\nimport { FieldSet } from '../types/FieldSet';\r\n\r\nconst randomColor = require('randomcolor');\r\n\r\ninterface Props extends StandardEditorProps<FieldSet[]> { }\r\n\r\nexport const FieldSetEditor: React.FC<Props> = ({ item, onChange, context }) => {\r\n  if (context.data && context.data.length > 0) {\r\n    const options = context.data\r\n      .flatMap((frame) => frame.fields)\r\n      .map((field, index) => ({\r\n        label: field.config?.displayName ? field.config.displayName : field.name,\r\n        value: index,\r\n        valid: field.type !== 'string',\r\n      }))\r\n      .filter((o) => o.valid);\r\n\r\n    const sizeOptions = Array(0);\r\n\r\n    for (let i = 1; i < 11; i += 2) {\r\n      sizeOptions.push({ label: i, value: -i });\r\n    }\r\n\r\n    options.forEach((o) => {\r\n      sizeOptions.push(o);\r\n    });\r\n\r\n    const selects = new Array(0);\r\n\r\n    const values = context.options.fieldSets.filter((x: FieldSet) => x.col != null);\r\n\r\n    if (values) {\r\n      values.forEach((val: Number, index: number) => {\r\n        const lineSize = values[index].lineType === 'none' ? null : (\r\n          <div className=\"ScatterFlex ScatterSize\">\r\n            <div className=\"ScatterLabel\">Size</div>\r\n            <Input\r\n              type=\"number\"\r\n              label=\"Line Size\"\r\n              value={values[index].lineSize}\r\n              min={1}\r\n              max={10}\r\n              title=\"Set size of line\"\r\n              onChange={(e) => {\r\n                values[index].lineSize = (e.target as HTMLInputElement).valueAsNumber;\r\n                onChange(values);\r\n              }}\r\n            />\r\n          </div>\r\n        );\r\n\r\n        const polynomialOrder = values[index].lineType === 'polynomial'\r\n          ?\r\n          (\r\n            <div className=\"ScatterFlex ScatterSize\">\r\n              <div className=\"ScatterLabel\">Order</div>\r\n              <Input\r\n                type=\"number\"\r\n                label=\"Line Size\"\r\n                value={values[index].polynomialOrder}\r\n                min={1}\r\n                max={10}\r\n                title=\"Set order of polynomial fit\"\r\n                onChange={(e) => {\r\n                  values[index].polynomialOrder = (e.target as HTMLInputElement).valueAsNumber;\r\n                  onChange(values);\r\n                }}\r\n              />\r\n            </div>\r\n          )\r\n          : null;\r\n\r\n        selects.push(\r\n          <div className=\"FieldSetEditor\">\r\n            <div className=\"ScatterFlex\">\r\n              <div className=\"ScatterSelect\">\r\n                <Select<number>\r\n                  isLoading={false}\r\n                  value={values[index].col}\r\n                  isClearable={values.length > 1}\r\n                  onChange={(e) => {\r\n                    if (e) { values[index].col = e.value; } else { values.splice(index, 1); }\r\n                    onChange(values);\r\n                  }}\r\n                  options={options}\r\n                />\r\n              </div>\r\n              <div className=\"ScatterFlex ScatterDotSize\">\r\n                <div className=\"ScatterLabel\">Size</div>\r\n\r\n                <div className=\"ScatterSelect\">\r\n                  <Select<number>\r\n                    isLoading={false}\r\n                    value={values[index].sizeCol}\r\n                    isClearable\r\n                    onChange={(e) => {\r\n                      values[index].sizeCol = e ? e.value as number : -1;\r\n                      onChange(values);\r\n                    }}\r\n                    options={sizeOptions}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"ScatterDotColor\">\r\n                <ColorPicker\r\n                  color={values[index].color}\r\n                  enableNamedColors={false}\r\n                  onChange={(e) => {\r\n                    values[index].color = e;\r\n                    onChange(values);\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"ScatterFlex\">\r\n              <div className=\"ScatterFlex ScatterLineType\">\r\n                <div className=\"ScatterLabel\">Line</div>\r\n                <Select<string>\r\n                  isLoading={false}\r\n                  value={values[index].lineType}\r\n                  onChange={(e) => {\r\n                    values[index].lineType = e.value;\r\n                    onChange(values);\r\n                  }}\r\n                  options={[\r\n                    { label: 'None', value: 'none' },\r\n                    { label: 'Simple', value: 'simple' },\r\n                    { label: 'Linear', value: 'linear' },\r\n                    { label: 'Theil–Sen', value: 'theilsen' },\r\n                    { label: 'Exponential', value: 'exponential' },\r\n                    { label: 'Power', value: 'power' },\r\n                    { label: 'Polynomial', value: 'polynomial' }]}\r\n                />\r\n              </div>\r\n              {polynomialOrder}\r\n              {lineSize}\r\n            </div>\r\n            <hr />\r\n          </div>,\r\n        );\r\n      });\r\n    }\r\n\r\n    const addButton = values.some((x: FieldSet) => x.col === -1)\r\n      ? null\r\n      : (\r\n        <div>\r\n          <Button\r\n            variant=\"secondary\"\r\n            size=\"sm\"\r\n            onClick={() => {\r\n              values.push(new FieldSet(-1, -1, randomColor(), 2, 0, 'none', 3, false));\r\n              onChange(values);\r\n            }}\r\n          >\r\n            <i className=\"fa fa-plus\" />\r\n            {' '}\r\n            Add\r\n            {item.name.replace('(s)', '')}\r\n          </Button>\r\n          <hr />\r\n        </div>\r\n      );\r\n\r\n    return (\r\n      <div>\r\n        {selects}\r\n        {addButton}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n","import * as React from 'react';\r\nimport { StandardEditorProps } from '@grafana/data';\r\nimport { ColorPicker } from '@grafana/ui';\r\nimport { Grid } from '../types/Grid';\r\n\r\ninterface Props extends StandardEditorProps<Grid> { }\r\n\r\nexport const GridEditor: React.FC<Props> = ({ value, onChange }) => (\r\n  <div className=\"ScatterBorder ScatterFlex\">\r\n    <div className=\"ScatterFlex\">\r\n      <div className=\"ScatterCheckbox\">Color</div>\r\n      <div className=\"ScatterDotColor\">\r\n        <ColorPicker\r\n          color={value.color}\r\n          enableNamedColors={false}\r\n          onChange={(e: string) => {\r\n            value.color = e;\r\n            onChange(value);\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n","import React from 'react';\r\nimport { StandardEditorProps } from '@grafana/data';\r\nimport { Select, Input, ColorPicker } from '@grafana/ui';\r\nimport { Label } from '../types/Label';\r\n\r\ninterface Props extends StandardEditorProps<Label> { }\r\n\r\nexport const LabelEditor: React.FC<Props> = ({ onChange, context }) => {\r\n  if (\r\n    context.data\r\n    && context.data.length > 0) {\r\n    const { label } = context.options;\r\n    const options = context.data\r\n      .flatMap((frame) => frame.fields)\r\n      .map((field, index) => ({\r\n        label: field.config?.displayName ? field.config.displayName : field.name,\r\n        value: index,\r\n        valid: field.type === 'string',\r\n      }))\r\n      .filter((o) => o.valid);\r\n\r\n    const color = label.col >= 0\r\n      ?\r\n      (\r\n        <div className=\"ScatterFlex\">\r\n          <div className=\"ScatterFlex ScatterSize\">\r\n            <div className=\"ScatterLabel\">Size</div>\r\n            <Input\r\n              type=\"number\"\r\n              min={1}\r\n              max={10}\r\n              title=\"Set size of text\"\r\n              value={label.textSize}\r\n              onChange={(e) => {\r\n                label.textSize = (e.target as HTMLInputElement).valueAsNumber;\r\n                onChange(label);\r\n              }}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"LabelColor\">\r\n            <ColorPicker\r\n              color={label.color}\r\n              enableNamedColors={false}\r\n              onChange={(e) => {\r\n                label.color = e;\r\n                onChange(label);\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      )\r\n      : null;\r\n\r\n    return (\r\n      <div className=\"LabelEditor\">\r\n        <div className=\"ScatterFlex\">\r\n          <div className=\"ScatterSelect\">\r\n            <Select<number>\r\n              isLoading={false}\r\n              isClearable\r\n              value={label.col}\r\n              onChange={(e) => {\r\n                label.col = e ? e.value as number : -1;\r\n                onChange(label);\r\n              }}\r\n              options={options}\r\n            />\r\n          </div>\r\n        </div>\r\n        {color}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <Select onChange={() => { }} disabled />;\r\n};\r\n","import React from 'react';\r\nimport { StandardEditorProps } from '@grafana/data';\r\nimport { Input } from '@grafana/ui';\r\nimport { Legend } from '../types/Legend';\r\n\r\ninterface Props extends StandardEditorProps<Legend> { }\r\n\r\nexport const LegendEditor: React.FC<Props> = ({ value, onChange }) => {\r\n  return (\r\n    <div className=\"ScatterFlex\">\r\n      <div className=\"ScatterFlex ScatterSize\">\r\n        <div className=\"ScatterLabel\">Size</div>\r\n        <Input\r\n          className=\"ScatterLegendSize\"\r\n          type=\"number\"\r\n          value={value.size}\r\n          min={0}\r\n          max={10}\r\n          title=\"Legend Text Size\"\r\n          onChange={(e) => {\r\n            value.size = (e.target as HTMLInputElement).valueAsNumber;\r\n            onChange(value);\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import * as React from 'react';\r\nimport { StandardEditorProps } from '@grafana/data';\r\nimport { Input } from '@grafana/ui';\r\nimport { MarginPair } from '../types/MarginPair';\r\n\r\ninterface Props extends StandardEditorProps<MarginPair> { }\r\n\r\nexport const MarginPairEditor: React.FC<Props> = ({ value, onChange }) => (\r\n  <div className=\"ScatterMargins\">\r\n    <div className=\"ScatterMargin\">\r\n      <Input\r\n        type=\"number\"\r\n        value={value.lower}\r\n//        title=\"Left Margin\"\r\n        onChange={(e) => {\r\n          value.lower = (e.target as HTMLInputElement).valueAsNumber;\r\n          onChange(value);\r\n        }}\r\n      />\r\n    </div>\r\n    <div className=\"ScatterExtentLimit\">\r\n      <Input\r\n        className=\"ScatterExtentLimit\"\r\n        type=\"number\"\r\n        value={value.upper}\r\n//        title=\"Right Margin\"\r\n        onChange={(e) => {\r\n          value.upper = (e.target as HTMLInputElement).valueAsNumber;\r\n          onChange(value);\r\n        }}\r\n      />\r\n    </div>\r\n  </div>\r\n);\r\n","import React from 'react';\r\nimport { StandardEditorProps } from '@grafana/data';\r\nimport { ColorPicker, Input } from '@grafana/ui';\r\nimport { Title } from '../types/Title';\r\n\r\ninterface Props extends StandardEditorProps<Title> { }\r\n\r\nexport const TitleEditor: React.FC<Props> = ({ value, onChange }) => {\r\n  const color = value.textSize > 0 ?\r\n    (\r\n      <div className=\"TitleColor\">\r\n        <ColorPicker\r\n          color={value.color}\r\n          enableNamedColors={false}\r\n          onChange={(e) => {\r\n            value.color = e;\r\n            onChange(value);\r\n          }}\r\n        />\r\n      </div>\r\n    ) : null;\r\n\r\n  return (\r\n    <div className=\"TitleEditor\">\r\n      <div className=\"TitleText\">\r\n        <Input\r\n          type=\"string\"\r\n          value={value.text}\r\n          onChange={(e) => {\r\n            value.text = (e.target as HTMLInputElement).value;\r\n            onChange(value);\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"ScatterFlex ScatterSize\">\r\n        <div className=\"ScatterLabel\">Size</div>\r\n        <Input\r\n          type=\"number\"\r\n          min={0}\r\n          max={10}\r\n          title=\"Set size of text\"\r\n          value={value.textSize}\r\n          onChange={(e) => {\r\n            value.textSize = (e.target as HTMLInputElement).valueAsNumber;\r\n            onChange(value);\r\n          }}\r\n        />\r\n      </div>\r\n      {color}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { StandardEditorProps } from '@grafana/data';\r\nimport { Checkbox, Select } from '@grafana/ui';\r\nimport { XAxis } from '../types/XAxis';\r\n\r\ninterface Props extends StandardEditorProps<XAxis> { }\r\n\r\nexport const XAxisEditor: React.FC<Props> = ({ onChange, context }) => {\r\n  if (\r\n    context.data\r\n    && context.data.length > 0) {\r\n    const { xAxis } = context.options;\r\n    const options = context.data\r\n      .flatMap((frame) => frame.fields)\r\n      .map((field, index) => ({\r\n        label: field.config?.displayName ? field.config.displayName : field.name,\r\n        value: index,\r\n        valid: field.type !== 'string',\r\n      }));\r\n\r\n    return (\r\n      <div className=\"XAxisEditor\">\r\n        <div className=\"ScatterFlex\">\r\n          <div className=\"ScatterSelect\">\r\n            <Select<number>\r\n              isLoading={false}\r\n              value={xAxis.col}\r\n              onChange={(e) => {\r\n                xAxis.col = e.value as number;\r\n                onChange(xAxis);\r\n              }}\r\n              options={options}\r\n            />\r\n          </div>\r\n          <div className=\"ScatterFlex\">\r\n            <div className=\"ScatterCheckbox\" title=\"Draw X axis right to left\">Inverted</div>\r\n            <Checkbox\r\n              value={xAxis.inverted}\r\n              onChange={(e) => {\r\n                xAxis.inverted = e.currentTarget.checked;\r\n                onChange(xAxis);\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <Select onChange={() => { }} disabled />;\r\n};\r\n","import { PanelPlugin } from '@grafana/data';\r\nimport { ExtentsEditor } from 'editors/ExtentsEditor';\r\nimport { MarginPairEditor } from 'editors/MarginPairEditor';\r\nimport { TitleEditor } from 'editors/TitleEditor';\r\nimport { LabelEditor } from 'editors/LabelEditor';\r\nimport { LegendEditor } from 'editors/LegendEditor';\r\nimport { BorderEditor } from 'editors/BorderEditor';\r\nimport { GridEditor } from 'editors/GridEditor';\r\nimport { Border } from 'types/Border';\r\nimport { XAxis } from 'types/XAxis';\r\nimport { MarginPair } from 'types/MarginPair';\r\nimport { Label } from 'types/Label';\r\nimport { Title } from 'types/Title';\r\nimport { Grid } from 'types/Grid';\r\nimport { Legend } from 'types/Legend';\r\nimport { Extents } from 'types/Extents';\r\nimport { ScatterOptions } from 'types/ScatterOptions';\r\nimport { ScatterPanel } from 'ScatterPanel';\r\nimport { XAxisEditor } from 'editors/XAxisEditor';\r\nimport { FieldSetEditor } from 'editors/FieldSetEditor';\r\n\r\nexport const plugin = new PanelPlugin<ScatterOptions>(ScatterPanel)\r\n  .setPanelOptions((builder) => {\r\n    builder.addCustomEditor({\r\n      id: 'xAxis',\r\n      path: 'xAxis',\r\n      name: 'X Axis Field',\r\n      category: ['X Axis'],\r\n      editor: XAxisEditor,\r\n      defaultValue: new XAxis(-1, false),\r\n    });\r\n\r\n    builder.addCustomEditor({\r\n      id: 'xAxisExtents',\r\n      path: 'xAxisExtents',\r\n      name: 'X Axis Extent (Min & Max)',\r\n      category: ['X Axis'],\r\n      editor: ExtentsEditor,\r\n      defaultValue: new Extents(NaN, NaN),\r\n    });\r\n\r\n    builder.addCustomEditor({\r\n      id: 'xMargins',\r\n      path: 'xMargins',\r\n      name: 'Margins (Left & Right)',\r\n      category: ['X Axis'],\r\n      editor: MarginPairEditor,\r\n      defaultValue: new MarginPair(30, 10),\r\n    });\r\n\r\n    builder.addCustomEditor({\r\n      id: 'xAxisTitle',\r\n      path: 'xAxisTitle',\r\n      name: 'X Axis Title',\r\n      category: ['X Axis'],\r\n      editor: TitleEditor,\r\n      defaultValue: new Title('', '#777', 1),\r\n    });\r\n\r\n    builder.addCustomEditor({\r\n      id: 'label',\r\n      path: 'label',\r\n      name: 'X Axis Labels',\r\n      category: ['X Axis'],\r\n      editor: LabelEditor,\r\n      defaultValue: new Label(-1, '#CCC', 2),\r\n    });\r\n\r\n    builder.addCustomEditor({\r\n      id: 'fieldSets',\r\n      path: 'fieldSets',\r\n      name: 'Field(s)',\r\n      category: ['Y Axis'],\r\n      editor: FieldSetEditor,\r\n      defaultValue: [],\r\n    });\r\n\r\n    builder.addCustomEditor({\r\n      id: 'yAxisExtents',\r\n      path: 'yAxisExtents',\r\n      name: 'Y Axis Extent (Min & Max)',\r\n      category: ['Y Axis'],\r\n      editor: ExtentsEditor,\r\n      defaultValue: new Extents(NaN, NaN),\r\n    });\r\n\r\n    builder.addCustomEditor({\r\n      id: 'yMargins',\r\n      path: 'yMargins',\r\n      name: 'Margins (Bottom & Top)',\r\n      category: ['Y Axis'],\r\n      editor: MarginPairEditor,\r\n      defaultValue: new MarginPair(20, 20),\r\n    });\r\n\r\n    builder.addCustomEditor({\r\n      id: 'yAxisTitle',\r\n      path: 'yAxisTitle',\r\n      name: 'Y Axis Title',\r\n      category: ['Y Axis'],\r\n      editor: TitleEditor,\r\n      defaultValue: new Title('', '#777', 1),\r\n    });\r\n\r\n    builder.addBooleanSwitch({\r\n      path: 'rotateYAxisTitle',\r\n      name: 'Rotate Y Axis Title',\r\n      category: ['Y Axis'],\r\n      defaultValue: false,\r\n      showIf: (config: { yAxisTitle: { text: string | any[] } }) => (\r\n        config.yAxisTitle.text?.length > 0\r\n      ),\r\n    });\r\n\r\n    builder.addCustomEditor({\r\n      id: 'legend',\r\n      path: 'legend',\r\n      name: 'Legend',\r\n      category: ['Display'],\r\n      editor: LegendEditor,\r\n      defaultValue: new Legend(false, 3),\r\n    });\r\n\r\n    builder.addCustomEditor({\r\n      id: 'grid',\r\n      path: 'grid',\r\n      name: 'Grid',\r\n      category: ['Display'],\r\n      editor: GridEditor,\r\n      defaultValue: new Grid('gray'),\r\n    });\r\n\r\n    builder.addCustomEditor({\r\n      id: 'border',\r\n      path: 'border',\r\n      name: 'Border',\r\n      category: ['Display'],\r\n      editor: BorderEditor,\r\n      defaultValue: new Border('yellow', 0),\r\n    });\r\n\r\n    return builder;\r\n  });\r\n","/* eslint no-useless-constructor:off, no-unused-vars:off, no-empty-function:off */\r\nexport class Border {\r\n  constructor(\r\n    public color: string,\r\n    public size: number,\r\n  ) {\r\n  }\r\n}\r\n","/* eslint no-useless-constructor:off, no-unused-vars:off, no-empty-function:off */\r\nexport class ColData {\r\n  constructor(\r\n    public name: string,\r\n    public displayName: string,\r\n    public type: string,\r\n    public values: (number | string | null)[],\r\n  ) {\r\n  }\r\n}\r\n","/* eslint no-useless-constructor:off, no-unused-vars:off, no-empty-function:off */\r\nexport class Extents {\r\n  constructor(\r\n    public min: number,\r\n    public max: number,\r\n  ) {\r\n  }\r\n}\r\n","/* eslint no-useless-constructor:off, no-unused-vars:off, no-empty-function:off */\r\nexport class FieldSet {\r\n  constructor(\r\n    public col: number,\r\n    public sizeCol: number,\r\n    public color: string,\r\n    public dotSize: number,\r\n    public lineSize: number,\r\n    public lineType: string,\r\n    public polynomialOrder: number,\r\n    public hidden: boolean,\r\n  ) {\r\n  }\r\n}\r\n","/* eslint no-useless-constructor:off, no-unused-vars:off, no-empty-function:off */\r\nexport class Grid {\r\n  constructor(\r\n    public color: string,\r\n  ) {\r\n  }\r\n}\r\n","/* eslint no-useless-constructor:off, no-unused-vars:off, no-empty-function:off */\r\nexport class Label {\r\n  constructor(\r\n    public col: number,\r\n    public color: string,\r\n    public textSize: number,\r\n  ) {\r\n  }\r\n}\r\n","/* eslint no-useless-constructor:off, no-unused-vars:off, no-empty-function:off */\r\nexport class Legend {\r\n  constructor(\r\n    public show: boolean,\r\n    public size: number,\r\n  ) {\r\n  }\r\n}\r\n","/* eslint no-useless-constructor:off, no-unused-vars:off, no-empty-function:off */\r\nexport class MarginPair {\r\n  constructor(\r\n    public lower: number,\r\n    public upper: number,\r\n  ) {\r\n  }\r\n}\r\n","/* eslint no-useless-constructor:off, no-unused-vars:off, no-empty-function:off */\r\nexport class Title {\r\n  constructor(\r\n    public text: string,\r\n    public color: string,\r\n    public textSize: number,\r\n  ) {\r\n  }\r\n}\r\n","/* eslint no-useless-constructor:off, no-unused-vars:off, no-empty-function:off */\r\nexport class XAxis {\r\n  constructor(\r\n    public col: number,\r\n    public inverted: boolean,\r\n  ) {\r\n  }\r\n}\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__grafana_data__;","module.exports = __WEBPACK_EXTERNAL_MODULE__grafana_ui__;","module.exports = __WEBPACK_EXTERNAL_MODULE_d3__;","module.exports = __WEBPACK_EXTERNAL_MODULE_jquery__;","module.exports = __WEBPACK_EXTERNAL_MODULE_react__;"],"sourceRoot":""}